Running soot scenario migration-tools;com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy;getNonPrefixedName(Sequence, ScriptGeneratorManager);de0e2f210167f6fea3a5a9937dfe42e1dccb4ddb
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/migration-tools/de0e2f210167f6fea3a5a9937dfe42e1dccb4ddb/original-without-dependencies/nuodb-migrator-core-2.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,78400
Time to perform Confluence 1 Inter 1,65300
Configure Soot Confluence 2 Inter 0,48800
Time to perform Confluence 2 Inter 0,58700
Visited methods: 104
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1),40,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object),131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: int toTitleCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430) => (<java.lang.Character: int toTitleCase(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6457)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: int toTitleCase(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0),6430,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: int toTitleCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: int toTitleCase(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0),6430,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack2 = (char) $stack1,6430,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = null,58,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters),127,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if $stack14 == 0 goto (branch),127,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters),127,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if $stack14 == 0 goto (branch),127,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack58 = (char) l10,2779,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack58 = (char) l10, 2779))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack58 = (char) l10,2779,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack58 = (char) l10, 2779)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,l3 = interfaceinvoke handlers.<java.util.Collection: java.util.Iterator iterator()>(),45,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1), 40) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, l3 = interfaceinvoke handlers.<java.util.Collection: java.util.Iterator iterator()>(), 45)) => Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack10 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),51,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1), 40) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack10 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 51)) => Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,handler = (com.nuodb.migrator.jdbc.metadata.MetaDataHandler) $stack10,51,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1), 40)) => Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1),40,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object),131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack12 = lengthof buffer,125,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if i >= $stack12 goto $stack13 = new java.lang.String,125,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack12 = lengthof buffer,125,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if i >= $stack12 goto $stack13 = new java.lang.String,125,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: int toTitleCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430) => (<java.lang.Character: int toTitleCase(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6457))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: int toTitleCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: int toTitleCase(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table table>,192,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2727)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l3 = lengthof $stack15,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l3 = lengthof $stack15, 2727)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = newarray (char)[l3],2753,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l5#14 = newarray (char)[l3], 2753))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack18 = l0.<java.lang.String: char[] value>,2756,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack18 = l0.<java.lang.String: char[] value>, 2756)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = newarray (char)[l3],2753,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l5#14 = newarray (char)[l3], 2753)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack19 = lengthof delimiters,121,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack19 = lengthof delimiters, 121)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,delimitersCount = $stack19,119,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, delimitersCount = $stack19, 119)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if delimitersCount != 0 goto $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,return $stack8,121,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = null,58,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<java.lang.String: void <init>(char[])>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,l0.<java.lang.String: char[] value> = $stack3,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, l0.<java.lang.String: char[] value> = $stack3, 166))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source),120,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if $stack7 != 0 goto $stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),120,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source),120,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if $stack7 != 0 goto $stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),120,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),72,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(), 72)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack25 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack24, 0),72,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack25 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack24, 0), 72)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack18 = l0.<java.lang.String: char[] value>,2756,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack18 = l0.<java.lang.String: char[] value>, 2756))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack18 = l0.<java.lang.String: char[] value>,2756,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack18 = l0.<java.lang.String: char[] value>, 2756)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,handler = (com.nuodb.migrator.jdbc.metadata.MetaDataHandler) $stack10,51,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1), 40)) => Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1),40,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object),131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2732,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2732)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l4 = $stack16[l2],2732,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l4 = $stack16[l2], 2732))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2732,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2732)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: int toTitleCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430) => (<java.lang.Character: int toTitleCase(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6457))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: int toTitleCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: int toTitleCase(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack45 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: char getDelimiter()>(),63,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack45 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: char getDelimiter()>(), 63)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2769,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2770,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2770)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l12 = l12 + l11,2765,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2775,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2775)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2792,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2792)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l13 = lengthof l8,2796,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l13 = lengthof l8, 2796)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack35 = $stack34 + l13,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack35 = $stack34 + l13, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack36 = $stack35 - l11,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack36 = $stack35 - l11, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l14 = newarray (char)[$stack36],2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l14 = newarray (char)[$stack36], 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = l14,2800,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack40 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l5#14, $stack39), 2789)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6),207,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6), 207))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6),207,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6), 207)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>,$stack1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(target),113,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,if source != null goto $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1),2833,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,return $stack2,111,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack62 = (char) l10,2616,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack62 = (char) l10, 2616)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack2 = this.<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: com.nuodb.migrator.jdbc.metadata.Identifier identifier>,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack2 = this.<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: com.nuodb.migrator.jdbc.metadata.Identifier identifier>, 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,this := @this: com.nuodb.migrator.jdbc.metadata.Identifier,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack23 = (char) l10,2767,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack23 = (char) l10, 2767))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack23 = (char) l10,2767,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack23 = (char) l10, 2767)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack3 = l0.<java.lang.String: char[] value>,687,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack3 = l0.<java.lang.String: char[] value>, 687))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),687,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 687)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack19 = lengthof delimiters,121,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack19 = lengthof delimiters, 121)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,delimitersCount = $stack19,119,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, delimitersCount = $stack19, 119)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if delimitersCount != 0 goto $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,return $stack8,121,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<java.lang.String: void <init>(char[])>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,l0.<java.lang.String: char[] value> = $stack3,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, l0.<java.lang.String: char[] value> = $stack3, 166))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table table>,192,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1),2833,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1),2833,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1),40,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object),131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4 = $stack16[l2],2572,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4 = $stack16[l2], 2572)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table table>,192,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2727)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l3 = lengthof $stack15,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l3 = lengthof $stack15, 2727)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = newarray (char)[l3],2753,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l5#14 = newarray (char)[l3], 2753))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack18 = l0.<java.lang.String: char[] value>,2756,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack18 = l0.<java.lang.String: char[] value>, 2756)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = newarray (char)[l3],2753,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l5#14 = newarray (char)[l3], 2753)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = null,58,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters),127,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if $stack14 == 0 goto (branch),127,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters),127,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if $stack14 == 0 goto (branch),127,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>,$stack1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(target),113,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l3 = lengthof $stack15,2567,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l3 = lengthof $stack15, 2567)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table table>,192,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<java.lang.String: void <init>(char[])>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,specialinvoke l0.<java.lang.Object: void <init>()>(),165,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, specialinvoke l0.<java.lang.Object: void <init>()>(), 165))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<java.lang.String: void <init>(char[])>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,specialinvoke l0.<java.lang.Object: void <init>()>(),165,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, specialinvoke l0.<java.lang.Object: void <init>()>(), 165)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer),134,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer),134,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source),120,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if $stack7 != 0 goto $stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),120,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source),120,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if $stack7 != 0 goto $stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),120,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,return $stack8,96,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,return $stack8,96,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = null,58,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack27),74,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack27), 74))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack27),74,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack27), 74)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table table>,192,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2727)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l3 = lengthof $stack15,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l3 = lengthof $stack15, 2727)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = newarray (char)[l3],2753,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l5#14 = newarray (char)[l3], 2753))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack18 = l0.<java.lang.String: char[] value>,2756,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack18 = l0.<java.lang.String: char[] value>, 2756)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = newarray (char)[l3],2753,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l5#14 = newarray (char)[l3], 2753)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),72,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(), 72)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack25 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack24, 0),72,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack25 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack24, 0), 72)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2769,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2770,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2770)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l12 = l12 + l11,2765,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2775,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2775)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2792,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2792)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l13 = lengthof l8,2796,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l13 = lengthof l8, 2796)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack35 = $stack34 + l13,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack35 = $stack34 + l13, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack36 = $stack35 - l11,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack36 = $stack35 - l11, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l14 = newarray (char)[$stack36],2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l14 = newarray (char)[$stack36], 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = l14,2800,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack40 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l5#14, $stack39), 2789)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack45 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: char getDelimiter()>(),63,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack45 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: char getDelimiter()>(), 63)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2),2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2), 2595)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),72,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(), 72)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack25 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack24, 0),72,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack25 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack24, 0), 72)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2769,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2770,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2770)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l12 = l12 + l11,2765,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2775,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2775)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2792,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2792)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l13 = lengthof l8,2796,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l13 = lengthof l8, 2796)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack35 = $stack34 + l13,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack35 = $stack34 + l13, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack36 = $stack35 - l11,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack36 = $stack35 - l11, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l14 = newarray (char)[$stack36],2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l14 = newarray (char)[$stack36], 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = l14,2800,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack40 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l5#14, $stack39), 2789)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,if source != null goto $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,if source != null goto $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,l3 = interfaceinvoke handlers.<java.util.Collection: java.util.Iterator iterator()>(),45,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1), 40) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, l3 = interfaceinvoke handlers.<java.util.Collection: java.util.Iterator iterator()>(), 45)) => Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack10 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),51,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1), 40) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack10 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 51)) => Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,handler = (com.nuodb.migrator.jdbc.metadata.MetaDataHandler) $stack10,51,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1), 40)) => Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1),40,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object),131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack12 = lengthof buffer,125,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if i >= $stack12 goto $stack13 = new java.lang.String,125,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack12 = lengthof buffer,125,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if i >= $stack12 goto $stack13 = new java.lang.String,125,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack45 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: char getDelimiter()>(),63,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack45 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: char getDelimiter()>(), 63)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2769,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2770,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2770)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l12 = l12 + l11,2765,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2775,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2775)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2792,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2792)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l13 = lengthof l8,2796,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l13 = lengthof l8, 2796)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack35 = $stack34 + l13,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack35 = $stack34 + l13, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack36 = $stack35 - l11,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack36 = $stack35 - l11, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l14 = newarray (char)[$stack36],2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l14 = newarray (char)[$stack36], 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = l14,2800,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack40 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l5#14, $stack39), 2789)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6),207,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6), 207))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6),207,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6), 207)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack47 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(column, 0),64,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack47 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(column, 0), 64)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2769,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2770,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2770)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l12 = l12 + l11,2765,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2775,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2775)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2792,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2792)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l13 = lengthof l8,2796,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l13 = lengthof l8, 2796)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack35 = $stack34 + l13,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack35 = $stack34 + l13, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack36 = $stack35 - l11,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack36 = $stack35 - l11, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l14 = newarray (char)[$stack36],2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l14 = newarray (char)[$stack36], 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = l14,2800,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack40 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l5#14, $stack39), 2789)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack4 = lengthof l1,204,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack4 = lengthof l1, 204))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack4 = lengthof l1,204,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack4 = lengthof l1, 204)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source),120,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if $stack7 != 0 goto $stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),120,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source),120,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if $stack7 != 0 goto $stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),120,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>,$stack1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(target),113,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,return $stack8,96,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,return $stack8,96,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack58 = (char) l10,2779,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack58 = (char) l10, 2779))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack58 = (char) l10,2779,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack58 = (char) l10, 2779)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack47 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(column, 0),64,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack47 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(column, 0), 64)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2769,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2770,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2770)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l12 = l12 + l11,2765,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2775,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2775)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2792,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2792)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l13 = lengthof l8,2796,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l13 = lengthof l8, 2796)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack35 = $stack34 + l13,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack35 = $stack34 + l13, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack36 = $stack35 - l11,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack36 = $stack35 - l11, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l14 = newarray (char)[$stack36],2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l14 = newarray (char)[$stack36], 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = l14,2800,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack40 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l5#14, $stack39), 2789)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack4 = lengthof l1,204,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack4 = lengthof l1, 204))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack4 = lengthof l1,204,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack4 = lengthof l1, 204)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = null,58,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,handler = (com.nuodb.migrator.jdbc.metadata.MetaDataHandler) $stack10,51,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1), 40)) => Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1),40,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object),131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2732,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2732)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l4 = $stack16[l2],2732,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l4 = $stack16[l2], 2732))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2732,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2732)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,if source != null goto $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,if source != null goto $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>,$stack1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(target),113,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2727))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2727)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l3 = lengthof $stack15,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l3 = lengthof $stack15, 2727)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l3 = lengthof $stack15,2567,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l3 = lengthof $stack15, 2567)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack62 = (char) l10,2616,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack62 = (char) l10, 2616)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer),134,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer),134,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,return $stack1,115,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,return $stack1,115,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,l3 = interfaceinvoke handlers.<java.util.Collection: java.util.Iterator iterator()>(),45,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1), 40) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, l3 = interfaceinvoke handlers.<java.util.Collection: java.util.Iterator iterator()>(), 45)) => Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack10 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),51,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1), 40) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack10 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 51)) => Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,handler = (com.nuodb.migrator.jdbc.metadata.MetaDataHandler) $stack10,51,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1), 40)) => Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1),40,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object),131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack12 = lengthof buffer,125,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if i >= $stack12 goto $stack13 = new java.lang.String,125,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack12 = lengthof buffer,125,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if i >= $stack12 goto $stack13 = new java.lang.String,125,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: int toTitleCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430) => (<java.lang.Character: int toTitleCase(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6457))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: int toTitleCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: int toTitleCase(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack27),74,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack27), 74))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack27),74,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack27), 74)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = null,58,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,if ch != delimiter goto l4 = l4 + 1,99,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,if ch != delimiter goto l4 = l4 + 1,99,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack19 = lengthof delimiters,121,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack19 = lengthof delimiters, 121)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,delimitersCount = $stack19,119,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, delimitersCount = $stack19, 119)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if delimitersCount != 0 goto $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,return $stack8,121,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>,$stack1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(target),113,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,if source != null goto $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1),2833,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,return $stack2,111,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack58 = (char) l10,2779,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack58 = (char) l10, 2779))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack58 = (char) l10,2779,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack58 = (char) l10, 2779)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,$stack2 = 0,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,return $stack2,43,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,if source == null goto $stack2 = 1,43,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack3 = l0.<java.lang.String: char[] value>,687,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack3 = l0.<java.lang.String: char[] value>, 687))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),687,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 687)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,if ch != delimiter goto l4 = l4 + 1,99,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,if ch != delimiter goto l4 = l4 + 1,99,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),72,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(), 72)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack25 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack24, 0),72,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack25 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack24, 0), 72)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2769,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2770,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2770)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l12 = l12 + l11,2765,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2775,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2775)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2792,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2792)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l13 = lengthof l8,2796,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l13 = lengthof l8, 2796)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack35 = $stack34 + l13,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack35 = $stack34 + l13, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack36 = $stack35 - l11,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack36 = $stack35 - l11, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l14 = newarray (char)[$stack36],2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l14 = newarray (char)[$stack36], 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = l14,2800,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack40 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l5#14, $stack39), 2789)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack10 = lengthof l1,198,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack10 = lengthof l1, 198)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2616,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2616))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack62 = (char) l10,2616,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack62 = (char) l10, 2616)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack2 = this.<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: com.nuodb.migrator.jdbc.metadata.Identifier identifier>,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack2 = this.<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: com.nuodb.migrator.jdbc.metadata.Identifier identifier>, 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,this := @this: com.nuodb.migrator.jdbc.metadata.Identifier,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack23 = (char) l10,2767,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack23 = (char) l10, 2767))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack23 = (char) l10,2767,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack23 = (char) l10, 2767)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = null,58,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack27),74,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack27), 74))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack27),74,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack27), 74)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>,$stack1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(target),113,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,handler = (com.nuodb.migrator.jdbc.metadata.MetaDataHandler) $stack10,51,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131) => (<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1), 40)) => Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1),40,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object),131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2732,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2732)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l4 = $stack16[l2],2732,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l4 = $stack16[l2], 2732))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2732,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2732)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,return $stack8,96,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,return $stack8,96,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack8 = staticinvoke <java.lang.Character: int codePointAtImpl(char[],int,int)>($stack7, l1, $stack6),689,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack7 = l0.<java.lang.String: char[] value>,689,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack7 = l0.<java.lang.String: char[] value>, 689)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,if source != null goto $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,if source != null goto $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack8 = new java.lang.StringBuilder,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>(), 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2769,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2770,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2770)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l12 = l12 + l11,2765,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack39 = l12 + l4,2789,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack39 = l12 + l4, 2789)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2),5141,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2),5141,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2567,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2567)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l3 = lengthof $stack15,2567,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l3 = lengthof $stack15, 2567)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1),40,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object),131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: int toTitleCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430) => (<java.lang.Character: int toTitleCase(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6457)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: int toTitleCase(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0),6430,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: int toTitleCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: int toTitleCase(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0),6430,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack2 = (char) $stack1,6430,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,$stack2 = 0,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,return $stack2,43,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,if source == null goto $stack2 = 1,43,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),72,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(), 72)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack25 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack24, 0),72,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack25 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack24, 0), 72)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack18 = l0.<java.lang.String: char[] value>,2756,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack18 = l0.<java.lang.String: char[] value>, 2756))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack18 = l0.<java.lang.String: char[] value>,2756,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack18 = l0.<java.lang.String: char[] value>, 2756)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = null,58,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack4 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack4 = l0.<java.lang.String: char[] value>, 2900))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack4 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack4 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,$stack5 = lengthof $stack4,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack5 = lengthof $stack4, 2900)) => Node(<java.lang.String: char[] toCharArray()>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack6, 0, l1, 0, $stack5),2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack6, 0, l1, 0, $stack5), 2900)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = null,58,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack4 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack4 = l0.<java.lang.String: char[] value>, 2900))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack4 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack4 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,$stack5 = lengthof $stack4,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack5 = lengthof $stack4, 2900)) => Node(<java.lang.String: char[] toCharArray()>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack6, 0, l1, 0, $stack5),2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack6, 0, l1, 0, $stack5), 2900)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack45 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: char getDelimiter()>(),63,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack45 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: char getDelimiter()>(), 63)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2769,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2770,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2770)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l12 = l12 + l11,2765,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2775,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2775)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2792,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2792)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l13 = lengthof l8,2796,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l13 = lengthof l8, 2796)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack35 = $stack34 + l13,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack35 = $stack34 + l13, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack36 = $stack35 - l11,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack36 = $stack35 - l11, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l14 = newarray (char)[$stack36],2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l14 = newarray (char)[$stack36], 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = l14,2800,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack40 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l5#14, $stack39), 2789)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6),207,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6), 207))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6),207,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack7 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(l1, l2, $stack6), 207)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),72,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(), 72)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack25 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack24, 0),72,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack25 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack24, 0), 72)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack18 = l0.<java.lang.String: char[] value>,2756,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack18 = l0.<java.lang.String: char[] value>, 2756))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack18 = l0.<java.lang.String: char[] value>,2756,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack18 = l0.<java.lang.String: char[] value>, 2756)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = null,58,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,if ch != delimiter goto l4 = l4 + 1,99,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,if ch != delimiter goto l4 = l4 + 1,99,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: int codePointAt(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,$stack3 = l0.<java.lang.String: char[] value>,687,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, $stack3 = l0.<java.lang.String: char[] value>, 687))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2608,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2609,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2609)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: int codePointAt(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: int codePointAt(int)>,specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1),687,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575) => (<java.lang.String: int codePointAt(int)>, specialinvoke $stack2.<java.lang.StringIndexOutOfBoundsException: void <init>(int)>(l1), 687)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack2 = this.<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: com.nuodb.migrator.jdbc.metadata.Identifier identifier>,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack2 = this.<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: com.nuodb.migrator.jdbc.metadata.Identifier identifier>, 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,this := @this: com.nuodb.migrator.jdbc.metadata.Identifier,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack23 = (char) l10,2767,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack23 = (char) l10, 2767))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack22 = l0.<java.lang.String: char[] value>,2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack22 = l0.<java.lang.String: char[] value>, 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = $stack22[l12],2766,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = $stack22[l12], 2766)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack23 = (char) l10,2767,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack23 = (char) l10, 2767)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<java.lang.String: void <init>(char[])>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,l0.<java.lang.String: char[] value> = $stack3,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, l0.<java.lang.String: char[] value> = $stack3, 166))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer),134,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer),134,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>,$stack1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(target),113,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,if source != null goto $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1),2833,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,return $stack2,111,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,return $stack1,115,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,return $stack1,115,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack47 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(column, 0),64,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack47 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(column, 0), 64)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2769,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2770,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2770)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l12 = l12 + l11,2765,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2775,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l9 = staticinvoke <java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2775)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9),2792,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l8 = staticinvoke <java.lang.Character: char[] toChars(int)>(l9), 2792)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l13 = lengthof l8,2796,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l13 = lengthof l8, 2796)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack35 = $stack34 + l13,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack35 = $stack34 + l13, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack36 = $stack35 - l11,2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack36 = $stack35 - l11, 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l14 = newarray (char)[$stack36],2798,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l14 = newarray (char)[$stack36], 2798)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l5#14 = l14,2800,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack40 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l5#14, $stack39), 2789)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack4 = lengthof l1,204,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack4 = lengthof l1, 204))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack37 = $stack36 + l13,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack37 = $stack36 + l13, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack38 = $stack37 - l11,2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack38 = $stack37 - l11, 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l14 = newarray (char)[$stack38],2635,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l14 = newarray (char)[$stack38], 2635)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = l14,2637,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.String: void <init>(char[],int,int)>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647)) => Node(<java.lang.String: void <init>(char[],int,int)>,$stack4 = lengthof l1,204,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, specialinvoke $stack22.<java.lang.String: void <init>(char[],int,int)>(l4#4, 0, $stack23), 2647) => (<java.lang.String: void <init>(char[],int,int)>, $stack4 = lengthof l1, 204)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack24 = l0.<java.lang.String: char[] value>,2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack24 = l0.<java.lang.String: char[] value>, 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l10 = $stack24[l12],2605,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = $stack24[l12], 2605)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack25 = (char) l10,2606,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack25 = (char) l10, 2606)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack8 = new java.lang.StringBuilder,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>(), 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2769,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2770,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2770)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l12 = l12 + l11,2765,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack39 = l12 + l4,2789,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack39 = l12 + l4, 2789)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2),5141,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2),5141,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack45 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: char getDelimiter()>(),63,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack45 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: char getDelimiter()>(), 63)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2),2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2), 2595)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,return $stack1,115,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,return $stack1,115,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2),2575,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5),2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack73 = staticinvoke <java.lang.Character: int charCount(int)>(l5), 2579)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l2 = l2 + $stack73,2579,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l5 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l2), 2575)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l2,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l12 = l2, 2604)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l12 = l12 + l11,2604,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2608)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table table>,192,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<java.lang.String: void <init>(char[])>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,specialinvoke l0.<java.lang.Object: void <init>()>(),165,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, specialinvoke l0.<java.lang.Object: void <init>()>(), 165))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<java.lang.String: void <init>(char[])>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,specialinvoke l0.<java.lang.Object: void <init>()>(),165,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, specialinvoke l0.<java.lang.Object: void <init>()>(), 165)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack8 = new java.lang.StringBuilder,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, specialinvoke $stack8.<java.lang.StringBuilder: void <init>()>(), 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12),2769,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10),2770,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l11 = staticinvoke <java.lang.Character: int charCount(int)>(l10), 2770)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l12 = l12 + l11,2765,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l10 = virtualinvoke l0.<java.lang.String: int codePointAt(int)>(l12), 2769)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack39 = l12 + l4,2789,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack39 = l12 + l4, 2789)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2),5141,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1),2624,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l8 = staticinvoke <java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>(l0, l12, l1), 2624)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l13 = lengthof l8,2633,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l13 = lengthof l8, 2633)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack28 = l13 - l11,2642,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack28 = l13 - l11, 2642)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l5 = l5 + $stack28,2642,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack41 = l12 + l5,2626,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack41 = l12 + l5, 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,l2 := @parameter2: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626)) => Node(<java.lang.Character: int toChars(int,char[],int)>,staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2),5141,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack42 = staticinvoke <java.lang.Character: int toChars(int,char[],int)>(l9, l4#4, $stack41), 2626) => (<java.lang.Character: int toChars(int,char[],int)>, staticinvoke <java.lang.Character: void toSurrogates(int,char[],int)>(l0, l1, l2), 5141)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>,$stack1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(target),113,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2727))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2727)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l3 = lengthof $stack15,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l3 = lengthof $stack15, 2727)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1),40,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object),131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4 = $stack16[l2],2572,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4 = $stack16[l2], 2572)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table table>,192,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<java.lang.String: void <init>(char[])>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,specialinvoke l0.<java.lang.Object: void <init>()>(),165,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, specialinvoke l0.<java.lang.Object: void <init>()>(), 165))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack2 = lengthof l1,166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack2 = lengthof l1, 166)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<java.lang.String: void <init>(char[])>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,specialinvoke l0.<java.lang.Object: void <init>()>(),165,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, specialinvoke l0.<java.lang.Object: void <init>()>(), 165)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1),40,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object),131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack16 = l0.<java.lang.String: char[] value>,2572,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack16 = l0.<java.lang.String: char[] value>, 2572)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4 = $stack16[l2],2572,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4 = $stack16[l2], 2572)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,$stack2 = 0,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,return $stack2,43,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,if source == null goto $stack2 = 1,43,SinkNode, path: ), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack2 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(handlers, object, 1),40,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object),131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>,$stack4 = (com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy) $stack3,131,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>,$stack4 = interfaceinvoke $stack3.<com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager,boolean)>(object, this, normalize),106,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: int toTitleCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430) => (<java.lang.Character: int toTitleCase(int)>, $stack1 = staticinvoke <java.lang.CharacterData: java.lang.CharacterData of(int)>(l0), 6457)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: int toTitleCase(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0),6430,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: int toTitleCase(int)>,l0 := @parameter0: int,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: int toTitleCase(int)>,$stack2 = virtualinvoke $stack1.<java.lang.CharacterData: int toTitleCase(int)>(l0),6457,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0),6430,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack2 = (char) $stack1,6430,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = null,58,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack4 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack4 = l0.<java.lang.String: char[] value>, 2900))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack4 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack4 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,$stack5 = lengthof $stack4,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack5 = lengthof $stack4, 2900)) => Node(<java.lang.String: char[] toCharArray()>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack6, 0, l1, 0, $stack5),2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack6, 0, l1, 0, $stack5), 2900)), SOURCE=>BASE: Node(<com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>,$stack1 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(target),113,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack31 = staticinvoke <com.google.common.collect.Iterables: int indexOf(java.lang.Iterable,com.google.common.base.Predicate)>($stack29, $stack30), 75)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2727))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,$stack15 = l0.<java.lang.String: char[] value>,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, $stack15 = l0.<java.lang.String: char[] value>, 2727)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l3 = lengthof $stack15,2727,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833) => (<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>, l3 = lengthof $stack15, 2727)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table table>,192,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1),2833,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1),2833,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table table>,192,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack42 = virtualinvoke column.<com.nuodb.migrator.jdbc.metadata.Column: com.nuodb.migrator.jdbc.metadata.Table getTable()>(), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0),61,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1),2833,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)) => Node(<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111) => (<java.lang.String: java.lang.String toUpperCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1), 2833)) => Node(<java.lang.String: java.lang.String toUpperCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($stack1),2833,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(), 111)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack45 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: char getDelimiter()>(),63,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack45 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: char getDelimiter()>(), 63)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595))
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,$stack20 = l0.<java.lang.String: char[] value>,2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, $stack20 = l0.<java.lang.String: char[] value>, 2595)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l4#4 = newarray (char)[l3],2590,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, l4#4 = newarray (char)[l3], 2590)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2),2595,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670) => (<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>, staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack20, 0, l4#4, 0, l2), 2595)), SOURCE=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,tableName = null,58,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>,$stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),75,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack3 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toLowerCase()>(), 107)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack6 = l0.<java.lang.String: char[] value>,2900,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack6 = l0.<java.lang.String: char[] value>, 2900)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters),127,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if $stack14 == 0 goto (branch),127,SinkNode, path: )
SINK=>BASE: Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: char[] toCharArray()>,$stack2 = l0.<java.lang.String: char[] value>,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack2 = l0.<java.lang.String: char[] value>, 2899)) => Node(<java.lang.String: char[] toCharArray()>,$stack3 = lengthof $stack2,2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123) => (<java.lang.String: char[] toCharArray()>, $stack3 = lengthof $stack2, 2899)) => Node(<java.lang.String: char[] toCharArray()>,l1 = newarray (char)[$stack3],2899,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<java.lang.Character: boolean isWhitespace(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<java.lang.Character: boolean isWhitespace(char)>,$stack1 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(l0),6757,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127) => (<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>, $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch), 96)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters),127,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,if $stack14 == 0 goto (branch),127,SinkNode, path: )]
Confluence interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Confluence flows from execution of lines 61 and 66 to line 83, defined in tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0) and column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and used in $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14)
Caused by line 61 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, tableName = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>($stack42, 0), 61) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>, $stack3 = virtualinvoke this.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>(object), 106) => (<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: com.nuodb.migrator.jdbc.metadata.generator.NamingStrategy getNamingStrategy(com.nuodb.migrator.jdbc.metadata.MetaData)>, $stack3 = staticinvoke <com.nuodb.migrator.jdbc.metadata.MetaDataHandlerUtils: com.nuodb.migrator.jdbc.metadata.MetaDataHandler getHandler(java.util.Collection,com.nuodb.migrator.jdbc.metadata.MetaData)>($stack2, object), 131)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/migration-tools/de0e2f210167f6fea3a5a9937dfe42e1dccb4ddb/original-without-dependencies/nuodb-migrator-core-2.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,91200
Runtime: 0.044s
Time to perform OA Inter 1,06000
OA Inter Visited methods: 107
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/migration-tools/de0e2f210167f6fea3a5a9937dfe42e1dccb4ddb/original-without-dependencies/nuodb-migrator-core-2.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,85900
Time to perform DFP Inter 0,98500
Depth limit: 5
CONFLICTS: DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,return $stack3,76,SinkNode, path: )), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack2 = this.<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: com.nuodb.migrator.jdbc.metadata.Identifier identifier>,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack2 = this.<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: com.nuodb.migrator.jdbc.metadata.Identifier identifier>, 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,this := @this: com.nuodb.migrator.jdbc.metadata.Identifier,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,return $stack1,43,SinkNode, path: )), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,return $stack1,43,SinkNode, path: )), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,return $stack3,76,SinkNode, path: ))]
Visited methods: 52
 Analysis results
----------------------------
 Number of conflicts: 4
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/migration-tools/de0e2f210167f6fea3a5a9937dfe42e1dccb4ddb/original-without-dependencies/nuodb-migrator-core-2.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,55900
Time to perform DFP Inter 1,00300
Depth limit: 5
CONFLICTS: DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack3 = null and propagated in $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 86, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 86 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 77, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 77 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in $stack13 = new java.lang.String
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 75, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 75 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31), 75)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 75, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 75 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31), 75)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack3 = null and propagated in $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 72, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 72 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 63, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 63 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 88, defined in $stack3 = null and propagated in column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 88 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 64, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 64 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 84, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in $stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 84 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 77, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 77 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 82, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 82 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 84, defined in $stack3 = null and propagated in column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 84 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack3 = null and propagated in ch = buffer[i]
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack3 = null and propagated in $stack12 = lengthof buffer
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 88, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 88 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 70, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 70 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34), 70)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack3 = null and propagated in $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 81, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in $stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 81 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47) => (<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(), 43)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 86, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 86 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 86, defined in $stack3 = null and propagated in column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 86 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 62, defined in $stack3 = null and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 62 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 64, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 64 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 63, defined in $stack3 = null and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 63 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 81, defined in $stack3 = null and propagated in $stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 81 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47) => (<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(), 43)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack3 = null and propagated in $stack13 = new java.lang.String
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 86, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 86 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 75, defined in $stack3 = null and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 75 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31), 75)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 72, defined in $stack3 = null and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 72 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in $stack13 = new java.lang.String
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack3 = null and propagated in $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 86, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 86 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 84, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 84 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 82, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 82 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 88, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 88 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 84, defined in $stack3 = null and propagated in $stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 84 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 62, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 62 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 77, defined in $stack3 = null and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 77 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack3 = null and propagated in $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 64, defined in $stack3 = null and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 64 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in $stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 56, defined in $stack3 = null and propagated in buffer = $stack8
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 56 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in $stack12 = lengthof buffer
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 70, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 70 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34), 70)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 82, defined in $stack3 = null and propagated in $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 82 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in ch = buffer[i]
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 84, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in $stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 84 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 81, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in $stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 81 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47) => (<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(), 43)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack3 = null and propagated in $stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 56, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in buffer = $stack8
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 56 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 56, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in buffer = $stack8
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 56 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 82, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 82 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 62, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 62 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 86, defined in $stack3 = null and propagated in $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 86 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 63, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 63 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in $stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>()
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 72, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 72 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in ch = buffer[i]
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 84, defined in $stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value> and propagated in column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)
Caused by line 84 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in $stack12 = lengthof buffer
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 83, defined in column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>() and propagated in $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 83 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)
DF interference in <com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>
Data flows from execution of line 66 to 70, defined in $stack3 = null and propagated in virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34)
Caused by line 66 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)
Caused by line 70 flow: path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34), 70)
[List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,return $stack3,76,SinkNode, path: )), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31),75,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31), 75))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),77,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34), 70))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),77,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack12 = lengthof buffer,125,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters),127,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(),43,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47) => (<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(), 43))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31),75,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31), 75))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,return $stack3,76,SinkNode, path: )), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters),127,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0),6430,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack2 = (char) $stack1,6430,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch),130,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source),120,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack12 = lengthof buffer,125,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters),127,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45),63,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47),64,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45),63,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25),72,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47),64,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31),75,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31), 75))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34), 70))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName),62,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0),6430,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack2 = (char) $stack1,6430,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch),130,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,return column#3,90,SinkNode, path: )), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0),6430,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack2 = (char) $stack1,6430,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch),130,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45),63,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34), 70))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),77,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,return column#3,90,SinkNode, path: )), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(),43,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47) => (<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(), 43))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47),64,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source),120,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127))), List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName),62,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25),72,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(),43,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47) => (<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(), 43))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,return column#3,90,SinkNode, path: )), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source),120,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120))), List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack12 = lengthof buffer,125,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName),62,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25),72,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72)))]
Visited methods: 52
 Analysis results
----------------------------
 Number of conflicts: 78
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/migration-tools/de0e2f210167f6fea3a5a9937dfe42e1dccb4ddb/original-without-dependencies/nuodb-migrator-core-2.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,84100
Time to perform PDG 0,51200
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/migration-tools/de0e2f210167f6fea3a5a9937dfe42e1dccb4ddb/original-without-dependencies/nuodb-migrator-core-2.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,71700
Time to perform PDG 0,57600
CONFLICTS: [List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25),72,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47),64,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45),63,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,return column#3,90,SinkNode, path: )), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),77,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45),63,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName),62,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25),72,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),77,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47),64,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName),62,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62))), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,return column#3,90,SinkNode, path: )), List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)))]
 Analysis results
----------------------------
 Number of conflicts: 26
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
