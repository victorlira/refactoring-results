List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,return $stack3,76,SinkNode, path: ))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack2 = this.<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: com.nuodb.migrator.jdbc.metadata.Identifier identifier>,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack2 = this.<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: com.nuodb.migrator.jdbc.metadata.Identifier identifier>, 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,this := @this: com.nuodb.migrator.jdbc.metadata.Identifier,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,return $stack1,43,SinkNode, path: ))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,return $stack1,43,SinkNode, path: ))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,return $stack3,76,SinkNode, path: ))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,return $stack3,76,SinkNode, path: ))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31),75,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31), 75)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),77,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34), 70)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),77,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack12 = lengthof buffer,125,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters),127,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(),43,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47) => (<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(), 43)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31),75,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31), 75)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,return $stack3,76,SinkNode, path: ))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters),127,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0),6430,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack2 = (char) $stack1,6430,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch),130,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source),120,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack12 = lengthof buffer,125,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters),127,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45),63,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47),64,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45),63,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25),72,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47),64,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31),75,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack31), 75)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),107,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 107)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34), 70)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName),62,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0),6430,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack2 = (char) $stack1,6430,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch),130,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,return column#3,90,SinkNode, path: ))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<java.lang.Character: char toTitleCase(char)>,l0 := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0),6430,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130) => (<java.lang.Character: char toTitleCase(char)>, $stack1 = staticinvoke <java.lang.Character: int toTitleCase(int)>(l0), 6430)) => Node(<java.lang.Character: char toTitleCase(char)>,$stack2 = (char) $stack1,6430,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch),130,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack17 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch), 130)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45),63,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack34), 70)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),77,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,$stack1 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>(source, null),115,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,return column#3,90,SinkNode, path: ))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack8 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),121,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(),43,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47) => (<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(), 43)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47),64,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source),120,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,ch = buffer[i],126,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, ch = buffer[i], 126)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,ch := @parameter0: char,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>,$stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch),96,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack14 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isDelimiter(char,char[])>(ch, delimiters), 127)))

List(Node(<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>,$stack1 = this.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value>,43,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66) => (<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>, $stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(), 76)) => Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = virtualinvoke $stack2.<com.nuodb.migrator.jdbc.metadata.Identifier: java.lang.String value()>(),76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName),62,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25),72,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47)) => Node(<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(),43,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack13 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>(tableName), 81) => (<com.nuodb.migrator.utils.StringUtils: boolean isLowerCase(java.lang.CharSequence)>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 47) => (<com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: int length()>(), 43)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>, $stack1 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 111)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>,$stack2 = virtualinvoke $stack1.<java.lang.String: java.lang.String toUpperCase()>(),111,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,return column#3,90,SinkNode, path: ))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<java.lang.String: void <init>(char[])>,l1 := @parameter0: char[],-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134)) => Node(<java.lang.String: void <init>(char[])>,$stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2),166,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer), 134) => (<java.lang.String: void <init>(char[])>, $stack3 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(l1, $stack2), 166)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack13 = new java.lang.String,134,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source),120,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack7 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isEmpty(java.lang.CharSequence)>(source), 120)))

List(Node(<com.nuodb.migrator.jdbc.metadata.IdentifiableBase: java.lang.String getName()>,$stack3 = null,76,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,source := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack9 = interfaceinvoke source.<java.lang.CharSequence: java.lang.String toString()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack10 = virtualinvoke $stack9.<java.lang.String: java.lang.String toLowerCase()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(),123,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, buffer = virtualinvoke $stack10.<java.lang.String: char[] toCharArray()>(), 123)) => Node(<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>,$stack12 = lengthof buffer,125,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack15 = staticinvoke <com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>(tableName, $stack14), 83) => (<com.nuodb.migrator.utils.StringUtils: boolean isCapitalizedCase(java.lang.CharSequence,char[])>, $stack4 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>($stack3, delimiters), 75) => (<com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence,char[])>, $stack12 = lengthof buffer, 125)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName),62,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25),72,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25),72,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47),64,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45),63,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,return column#3,90,SinkNode, path: ))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),77,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45),63,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack45), 63)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName),62,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25),72,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack25), 72)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),77,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3), 77)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(),66,SourceNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke sequence.<com.nuodb.migrator.jdbc.metadata.Sequence: java.lang.String getName()>(), 66)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47),64,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack47), 64)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence),75,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack30 = staticinvoke <com.nuodb.migrator.utils.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(sequence), 75)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer),86,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String upperCase(java.lang.CharSequence)>(buffer), 86)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName),62,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(tableName), 62)))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer),84,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String capitalizedCase(java.lang.CharSequence)>(buffer), 84)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(),88,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>(), 88)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,return column#3,90,SinkNode, path: ))

List(Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if column#3 != null goto virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(column#3),67,SourceNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,if $stack23 == null goto $stack24 = virtualinvoke schema.<com.nuodb.migrator.jdbc.metadata.Schema: com.nuodb.migrator.jdbc.metadata.Catalog getCatalog()>(),69,SimpleNode, path: ) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,$stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0),70,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, $stack34 = virtualinvoke scriptGeneratorManager.<com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager: java.lang.String getName(com.nuodb.migrator.jdbc.metadata.MetaData,boolean)>(schema, 0), 70)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,buffer = $stack8,56,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, buffer = $stack8, 56)) => Node(<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>,column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer),82,SinkNode, path: (<com.nuodb.migrator.jdbc.metadata.generator.SequenceQualifyNamingStrategy: java.lang.String getNonPrefixedName(com.nuodb.migrator.jdbc.metadata.Sequence,com.nuodb.migrator.jdbc.metadata.generator.ScriptGeneratorManager)>, column#3 = staticinvoke <com.nuodb.migrator.utils.StringUtils: java.lang.String lowerCase(java.lang.CharSequence)>(buffer), 82)))

