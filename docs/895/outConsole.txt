Running soot scenario rabbitmq-flume-plugin;com.aweber.flume.source.rabbitmq.Consumer;run();710a5fb3b85f30fc1992e135ee8b303591aa6bce
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/rabbitmq-flume-plugin/710a5fb3b85f30fc1992e135ee8b303591aa6bce/original-without-dependencies/rabbitmq-flume-plugin-1.0.3-customheaders-0.1.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,46700
Time to perform Confluence 1 Inter 0,85700
Configure Soot Confluence 2 Inter 0,15100
Time to perform Confluence 2 Inter 0,28300
Visited methods: 30
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,$stack3 = virtualinvoke $stack2.<com.rabbitmq.client.Envelope: long getDeliveryTag()>(),215,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,return $stack3,215,SinkNode, path: )
SINK=>BASE: Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack23 = this.<com.aweber.flume.source.rabbitmq.Consumer: int timeout>,180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack23 = this.<com.aweber.flume.source.rabbitmq.Consumer: int timeout>, 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack24 = (long) $stack23,180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack24 = (long) $stack23, 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24),180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24), 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,delivery := @parameter0: com.rabbitmq.client.QueueingConsumer$Delivery,-1,SimpleNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,$stack2 = virtualinvoke delivery.<com.rabbitmq.client.QueueingConsumer$Delivery: com.rabbitmq.client.Envelope getEnvelope()>(),215,SimpleNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194) => (<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>, $stack2 = virtualinvoke delivery.<com.rabbitmq.client.QueueingConsumer$Delivery: com.rabbitmq.client.Envelope getEnvelope()>(), 215)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,$stack3 = virtualinvoke $stack2.<com.rabbitmq.client.Envelope: long getDeliveryTag()>(),215,SimpleNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,return $stack3,215,SinkNode, path: ), SOURCE=>BASE: Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,$stack3 = virtualinvoke $stack2.<com.rabbitmq.client.Envelope: long getDeliveryTag()>(),215,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack30 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery),203,SinkNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack30 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 203))
SINK=>BASE: Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack23 = this.<com.aweber.flume.source.rabbitmq.Consumer: int timeout>,180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack23 = this.<com.aweber.flume.source.rabbitmq.Consumer: int timeout>, 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack24 = (long) $stack23,180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack24 = (long) $stack23, 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24),180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24), 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,delivery := @parameter0: com.rabbitmq.client.QueueingConsumer$Delivery,-1,SimpleNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,$stack2 = virtualinvoke delivery.<com.rabbitmq.client.QueueingConsumer$Delivery: com.rabbitmq.client.Envelope getEnvelope()>(),215,SimpleNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194) => (<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>, $stack2 = virtualinvoke delivery.<com.rabbitmq.client.QueueingConsumer$Delivery: com.rabbitmq.client.Envelope getEnvelope()>(), 215)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,$stack3 = virtualinvoke $stack2.<com.rabbitmq.client.Envelope: long getDeliveryTag()>(),215,SimpleNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack30 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery),203,SinkNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack30 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 203)), SOURCE=>BASE: Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,$stack3 = virtualinvoke $stack2.<com.rabbitmq.client.Envelope: long getDeliveryTag()>(),215,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery),194,SinkNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: void rejectMessage(long)>($stack50),194,SinkNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: void rejectMessage(long)>($stack50), 194))
SINK=>BASE: Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack23 = this.<com.aweber.flume.source.rabbitmq.Consumer: int timeout>,180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack23 = this.<com.aweber.flume.source.rabbitmq.Consumer: int timeout>, 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack24 = (long) $stack23,180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack24 = (long) $stack23, 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24),180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24), 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery),194,SinkNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack50 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194))]
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/rabbitmq-flume-plugin/710a5fb3b85f30fc1992e135ee8b303591aa6bce/original-without-dependencies/rabbitmq-flume-plugin-1.0.3-customheaders-0.1.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,60900
Runtime: 0.033s
Time to perform OA Inter 0,68400
OA Inter Visited methods: 1
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/rabbitmq-flume-plugin/710a5fb3b85f30fc1992e135ee8b303591aa6bce/original-without-dependencies/rabbitmq-flume-plugin-1.0.3-customheaders-0.1.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,56100
Time to perform DFP Inter 0,69300
Depth limit: 5
CONFLICTS: []
Visited methods: 15
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/rabbitmq-flume-plugin/710a5fb3b85f30fc1992e135ee8b303591aa6bce/original-without-dependencies/rabbitmq-flume-plugin-1.0.3-customheaders-0.1.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,53500
Time to perform DFP Inter 0,77700
Depth limit: 5
CONFLICTS: DF interference in <com.aweber.flume.source.rabbitmq.Consumer: void run()>
Data flows from execution of line 180 to 194, defined in $stack24 = (long) $stack23 and propagated in $stack3 = virtualinvoke $stack2.<com.rabbitmq.client.Envelope: long getDeliveryTag()>()
Caused by line 180 flow: path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack24 = (long) $stack23, 180)
Caused by line 194 flow: path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack63 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194)
DF interference in <com.aweber.flume.source.rabbitmq.Consumer: void run()>
Data flows from execution of line 180 to 202, defined in $stack24 = (long) $stack23 and propagated in interfaceinvoke $stack4.<com.rabbitmq.client.Channel: void basicAck(long,boolean)>(deliveryTag, 0)
Caused by line 180 flow: path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack24 = (long) $stack23, 180)
Caused by line 202 flow: path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: void ackMessage(long)>($stack40), 202) => (<com.aweber.flume.source.rabbitmq.Consumer: void ackMessage(long)>, interfaceinvoke $stack4.<com.rabbitmq.client.Channel: void basicAck(long,boolean)>(deliveryTag, 0), 229)
DF interference in <com.aweber.flume.source.rabbitmq.Consumer: void run()>
Data flows from execution of line 180 to 202, defined in $stack24 = (long) $stack23 and propagated in $stack40 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery)
Caused by line 180 flow: path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack24 = (long) $stack23, 180)
Caused by line 202 flow: path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack40 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 202)
[List(Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack24 = (long) $stack23,180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack24 = (long) $stack23, 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24),180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24), 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack30 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery),203,SimpleNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack30 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 203)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void ackMessage(long)>,deliveryTag := @parameter0: long,-1,SimpleNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: void ackMessage(long)>($stack40), 202)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void ackMessage(long)>,interfaceinvoke $stack4.<com.rabbitmq.client.Channel: void basicAck(long,boolean)>(deliveryTag, 0),229,SinkNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: void ackMessage(long)>($stack40), 202) => (<com.aweber.flume.source.rabbitmq.Consumer: void ackMessage(long)>, interfaceinvoke $stack4.<com.rabbitmq.client.Channel: void basicAck(long,boolean)>(deliveryTag, 0), 229))), List(Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack24 = (long) $stack23,180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack24 = (long) $stack23, 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24),180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24), 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,delivery := @parameter0: com.rabbitmq.client.QueueingConsumer$Delivery,-1,SimpleNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack63 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,$stack2 = virtualinvoke delivery.<com.rabbitmq.client.QueueingConsumer$Delivery: com.rabbitmq.client.Envelope getEnvelope()>(),215,SinkNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack63 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194) => (<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>, $stack2 = virtualinvoke delivery.<com.rabbitmq.client.QueueingConsumer$Delivery: com.rabbitmq.client.Envelope getEnvelope()>(), 215)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>,$stack3 = virtualinvoke $stack2.<com.rabbitmq.client.Envelope: long getDeliveryTag()>(),215,SinkNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack63 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 194))), List(Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack24 = (long) $stack23,180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack24 = (long) $stack23, 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24),180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24), 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack40 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery),202,SinkNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack40 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 202)))]
Visited methods: 15
 Analysis results
----------------------------
 Number of conflicts: 3
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/rabbitmq-flume-plugin/710a5fb3b85f30fc1992e135ee8b303591aa6bce/original-without-dependencies/rabbitmq-flume-plugin-1.0.3-customheaders-0.1.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,48100
Time to perform PDG 0,58000
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/rabbitmq-flume-plugin/710a5fb3b85f30fc1992e135ee8b303591aa6bce/original-without-dependencies/rabbitmq-flume-plugin-1.0.3-customheaders-0.1.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,50300
Time to perform PDG 0,54800
CONFLICTS: [List(Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,if delivery == null goto $stack26 = this.<com.aweber.flume.source.rabbitmq.Consumer: org.apache.flume.instrumentation.SourceCounter sourceCounter>,187,SourceNode, path: ) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,if $stack37 != 0 goto $stack26 = this.<com.aweber.flume.source.rabbitmq.Consumer: org.apache.flume.instrumentation.SourceCounter sourceCounter>,198,SimpleNode, path: ) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack40 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery),202,SinkNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack40 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 202))), List(Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack23 = this.<com.aweber.flume.source.rabbitmq.Consumer: int timeout>,180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack23 = this.<com.aweber.flume.source.rabbitmq.Consumer: int timeout>, 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack24 = (long) $stack23,180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack24 = (long) $stack23, 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24),180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24), 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack40 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery),202,SinkNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack40 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 202))), List(Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack22 = this.<com.aweber.flume.source.rabbitmq.Consumer: int timeout>,177,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack22 = this.<com.aweber.flume.source.rabbitmq.Consumer: int timeout>, 177)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,if $stack22 >= 0 goto $stack23 = this.<com.aweber.flume.source.rabbitmq.Consumer: int timeout>,177,SourceNode, path: ) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack24 = (long) $stack23,180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack24 = (long) $stack23, 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24),180,SourceNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, delivery = virtualinvoke consumer.<com.rabbitmq.client.QueueingConsumer: com.rabbitmq.client.QueueingConsumer$Delivery nextDelivery(long)>($stack24), 180)) => Node(<com.aweber.flume.source.rabbitmq.Consumer: void run()>,$stack40 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery),202,SinkNode, path: (<com.aweber.flume.source.rabbitmq.Consumer: void run()>, $stack40 = specialinvoke this.<com.aweber.flume.source.rabbitmq.Consumer: long getDeliveryTag(com.rabbitmq.client.QueueingConsumer$Delivery)>(delivery), 202)))]
 Analysis results
----------------------------
 Number of conflicts: 3
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
