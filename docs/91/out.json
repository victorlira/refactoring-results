[
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l2 - l2",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l2 = l2 + 32",
				"location": {
					"file": "",
					"class": "java.lang.Long",
					"method": "numberOfLeadingZeros",
					"line": 1424
				},
				"stackTrace": [{
	"class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
	"method": "generate",
	"line": 72
},{
	"class": "org.rdfhdt.hdt.util.BitUtil",
	"method": "log2",
	"line": 44
},{
	"class": "java.lang.Long",
	"method": "numberOfLeadingZeros",
	"line": 1424
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l2 = 1",
				"location": {
					"file": "",
					"class": "java.lang.Long",
					"method": "numberOfLeadingZeros",
					"line": 1420
				},
				"stackTrace": [{
	"class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
	"method": "generate",
	"line": 91
},{
	"class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
	"method": "aggressiveTrimToSize",
	"line": 263
},{
	"class": "org.rdfhdt.hdt.util.BitUtil",
	"method": "log2",
	"line": 44
},{
	"class": "java.lang.Long",
	"method": "numberOfLeadingZeros",
	"line": 1420
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> - SequenceLog64.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
				"location": {
					"file": "",
					"class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
					"method": "aggressiveTrimToSize",
					"line": 272
				},
				"stackTrace": [{
	"class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
	"method": "generate",
	"line": 91
},{
	"class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
	"method": "aggressiveTrimToSize",
	"line": 272
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "SequenceLog64.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = null",
				"location": {
					"file": "",
					"class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
					"method": "<init>",
					"line": -1
				},
				"stackTrace": [{
	"class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
	"method": "generate",
	"line": 109
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l3 - l3",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l3 = $stack13",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "desiredAssertionStatus",
					"line": 3211
				},
				"stackTrace": [{
	"class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
	"method": "generate",
	"line": 72
},{
	"class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
	"method": "<init>",
	"line": 67
},{
	"class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
	"method": "<init>",
	"line": 75
},{
	"class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
	"method": "<clinit>",
	"line": 54
},{
	"class": "java.lang.Class",
	"method": "desiredAssertionStatus",
	"line": 3211
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l3 = $stack13",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "desiredAssertionStatus",
					"line": 3211
				},
				"stackTrace": [{
	"class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
	"method": "generate",
	"line": 91
},{
	"class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
	"method": "aggressiveTrimToSize",
	"line": 260
},{
	"class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
	"method": "get",
	"line": 226
},{
	"class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
	"method": "<clinit>",
	"line": 54
},{
	"class": "java.lang.Class",
	"method": "desiredAssertionStatus",
	"line": 3211
}]
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = pos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "chunkIndex = 63L - $stack29",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack58)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "112"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack59 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack58), 112)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>",
  "line": "72"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = numbits, 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void resize(long)>",
  "line": "287"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void resize(long)>(val), 81)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void resize(long)>, $stack3 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 287)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, $stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "168"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 168)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "n := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: long",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = (int) l0",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1424"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 16",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1425"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 8",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1426"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 2",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1428"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = l3 >>> 31",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = l2 - $stack10",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "max = 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "257"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = max",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = max, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "n := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: long",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = (int) l0",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1424"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 16",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1425"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 8",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1426"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 2",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1428"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = l3 >>> 31",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = l2 - $stack10",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "n := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: long",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = (int) l0",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1424"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 16",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1425"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 8",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1426"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 2",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1428"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = l3 >>> 31",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = l2 - $stack10",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = pos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "chunkIndex = 63L - $stack29",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = (int) superBlockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "177"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack22 = (int) superBlockIndex, 177)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "blockIndex = pos / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "180"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = (int) blockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "181"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack25 = (int) blockIndex, 181)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = (int) superBlockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "177"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack22 = (int) superBlockIndex, 177)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = pos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "chunkIndex = 63L - $stack29",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack32 = (int) chunkIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "184"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack32 = (int) chunkIndex, 184)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>",
  "line": "75"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (int) $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "149"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = wordIndex + 1",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "150"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack7 = wordIndex + 1, 150)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "150"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7), 150)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack37 = (int) superBlockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "175"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack37 = (int) superBlockIndex, 175)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordNum = (int) $stack3",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, wordNum = (int) $stack3, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum), 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7, 122)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = -1L << numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)","(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, $stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "168"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 168)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = pos cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "162"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack17 = pos cmp 0L, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "n := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: long",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = (int) l0",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1424"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 16",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1425"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 8",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1426"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 2",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1428"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = l3 >>> 31",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = l2 - $stack10",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "max = 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "257"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = max",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = max, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = -1L << numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)","(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = pos cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "162"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack17 = pos cmp 0L, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>",
  "line": "73"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitsField := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = pos cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "162"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack17 = pos cmp 0L, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack18 = (int) bitIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "153"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack18 = (int) bitIndex, 153)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack37 = (int) superBlockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "175"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack37 = (int) superBlockIndex, 175)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "n := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: long",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = (int) l0",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1424"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 16",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1425"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 8",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1426"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 2",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1428"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = l3 >>> 31",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = l2 - $stack10",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "blockIndex = pos / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "180"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = (int) blockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "181"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack25 = (int) blockIndex, 181)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "blockIndex = pos / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "180"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = (int) blockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "181"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack25 = (int) blockIndex, 181)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = -1L << numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)","(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "n := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: long",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = (int) l0",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1424"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 16",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1425"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 8",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1426"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 2",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1428"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = l3 >>> 31",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = l2 - $stack10",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = pos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "chunkIndex = 63L - $stack29",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = n cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack2 = n cmp 0L, 44)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == 0 goto $stack5 = 0",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = pos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "chunkIndex = 63L - $stack29",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack32 = (int) chunkIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "184"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack32 = (int) chunkIndex, 184)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack37 = (int) superBlockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "175"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack37 = (int) superBlockIndex, 175)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "154"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (int) $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "149"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = wordIndex + 1",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "150"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack7 = wordIndex + 1, 150)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "150"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7), 150)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (int) $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "149"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (int) $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "149"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = wordIndex + 1",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "150"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack7 = wordIndex + 1, 150)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "150"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7), 150)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack34 = (long) i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack34 = (long) i, 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "n := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: long",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = (int) l0",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1424"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 16",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1425"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 8",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1426"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 2",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1428"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = l3 >>> 31",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = l2 - $stack10",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordNum = (int) $stack3",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, wordNum = (int) $stack3, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum), 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7, 122)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordNum = (int) $stack3",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, wordNum = (int) $stack3, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum), 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7, 122)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = bitIndex cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "146"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack5 = bitIndex cmp 0L, 146)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack37 = (int) superBlockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "175"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack37 = (int) superBlockIndex, 175)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "blockIndex = pos / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "180"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = (int) blockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "181"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack25 = (int) blockIndex, 181)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitsField := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "i = 0",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack8 = (long) i, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = i + 1",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack8 = (long) i, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack34 = (long) i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack34 = (long) i, 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = -1L << numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)","(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordNum = (int) $stack3",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, wordNum = (int) $stack3, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum), 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7, 122)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack7 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "267"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack12 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 267)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitsField := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = -1L << numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)","(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "85"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "count = $stack120 + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "85"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, count = $stack120 + 1L, 85)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack130 = count",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "75"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack130 = count, 75)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, $stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "168"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 168)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "72"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>",
  "line": "67"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = pos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "chunkIndex = 63L - $stack29",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack32 = (int) chunkIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "184"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack32 = (int) chunkIndex, 184)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = pos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "chunkIndex = 63L - $stack29",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack32 = (int) chunkIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "184"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack32 = (int) chunkIndex, 184)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "85"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "count = $stack120 + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "85"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, count = $stack120 + 1L, 85)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack130 = count",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "75"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack130 = count, 75)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = bitIndex cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "146"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack5 = bitIndex cmp 0L, 146)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (int) $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "149"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "154"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, $stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "168"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 168)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = pos cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "162"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack17 = pos cmp 0L, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, $stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "168"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 168)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "154"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (int) $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "149"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = wordIndex + 1",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "150"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack7 = wordIndex + 1, 150)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "150"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7), 150)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "72"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = pos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "chunkIndex = 63L - $stack29",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "85"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "count = $stack120 + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "85"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, count = $stack120 + 1L, 85)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack130 = count",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "75"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack130 = count, 75)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordNum = (int) $stack3",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, wordNum = (int) $stack3, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum), 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7, 122)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitsField := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack37 = (int) superBlockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "175"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack37 = (int) superBlockIndex, 175)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "268"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack30 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 268)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitsField := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (int) $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "149"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack7 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack18 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "total := @parameter1: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack18 = (int) bitIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "153"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack18 = (int) bitIndex, 153)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = numbits - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack2 = numbits - 1L, 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = $stack2 >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack3 = $stack2 >>> 6, 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: ')",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "147"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: '), 147)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = pos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "chunkIndex = 63L - $stack29",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitsField := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (int) $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "149"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = bitIndex cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "146"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack5 = bitIndex cmp 0L, 146)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "blockIndex = pos / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "180"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = (int) blockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "181"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack25 = (int) blockIndex, 181)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "85"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "count = $stack120 + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "85"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, count = $stack120 + 1L, 85)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack130 = count",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "75"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack130 = count, 75)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "269"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack23 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 269)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitsField := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = -1L << numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)","(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (int) $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "149"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = wordIndex + 1",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "150"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack7 = wordIndex + 1, 150)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "150"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7), 150)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = (int) superBlockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "177"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack22 = (int) superBlockIndex, 177)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = numbits - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack2 = numbits - 1L, 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = $stack2 >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack3 = $stack2 >>> 6, 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>",
  "line": "75"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = (int) size",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>",
  "line": "78"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack9 = (int) size, 78)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = staticinvoke <java.lang.Math: int max(int,int)>($stack9, 1)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>",
  "line": "78"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack10 = staticinvoke <java.lang.Math: int max(int,int)>($stack9, 1), 78)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack11 = newarray (long)[$stack10]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>",
  "line": "78"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack11 = newarray (long)[$stack10], 78)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = -1L << numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)","(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "blockIndex = pos / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "180"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "blockIndex = pos / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "180"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = (int) bitIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "155"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack9 = (int) bitIndex, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack4 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>($stack3, numentries)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void resize(long)>",
  "line": "287"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void resize(long)>(val), 81)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void resize(long)>, $stack4 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>($stack3, numentries), 287)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack59 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack58)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "112"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack59 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack58), 112)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = -1L << numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)","(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (int) $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "149"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "blockIndex = pos / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "180"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = bitIndex cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "146"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack5 = bitIndex cmp 0L, 146)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = numbits - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack2 = numbits - 1L, 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = $stack2 >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack3 = $stack2 >>> 6, 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "n := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: long",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = (int) l0",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1424"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 16",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1425"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 8",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1426"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 2",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1428"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = l3 >>> 31",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = l2 - $stack10",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "85"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "count = $stack120 + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "85"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, count = $stack120 + 1L, 85)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack130 = count",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "75"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack130 = count, 75)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "blockIndex = pos / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "180"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack34 = (long) i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack34 = (long) i, 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = -1L << numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)","(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (int) $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "149"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitsField := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = pos cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "162"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack17 = pos cmp 0L, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = numbits - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack2 = numbits - 1L, 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = $stack2 >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack3 = $stack2 >>> 6, 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack18 = (int) bitIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "153"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack18 = (int) bitIndex, 153)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = (int) superBlockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "177"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack22 = (int) superBlockIndex, 177)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "i = 0",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack8 = (long) i, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = i + 1",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack8 = (long) i, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack34 = (long) i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack34 = (long) i, 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "n := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: long",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = (int) l0",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1424"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 16",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1425"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 8",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1426"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 2",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1428"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = l3 >>> 31",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = l2 - $stack10",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: ')",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "147"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: '), 147)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = pos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "chunkIndex = 63L - $stack29",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack32 = (int) chunkIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "184"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack32 = (int) chunkIndex, 184)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = (int) superBlockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "177"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack22 = (int) superBlockIndex, 177)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack48 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack47)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "109"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack48 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack47), 109)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack44.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>($stack48, $stack51)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "109"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack44.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>($stack48, $stack51), 109)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordNum = (int) $stack3",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, wordNum = (int) $stack3, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum), 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7, 122)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack34 = (long) i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack34 = (long) i, 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitsField := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = numbits - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack2 = numbits - 1L, 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = $stack2 >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack3 = $stack2 >>> 6, 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = -1L << numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)","(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>",
  "line": "75"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = size cmp 2147483647L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>",
  "line": "79"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack14 = size cmp 2147483647L, 79)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = bitIndex cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "146"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack5 = bitIndex cmp 0L, 146)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "154"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = (int) bitIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "155"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack9 = (int) bitIndex, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = (int) bitIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "155"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack9 = (int) bitIndex, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = bitIndex >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = (int) $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>",
  "line": "89"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "149"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = wordIndex + 1",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "150"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack7 = wordIndex + 1, 150)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "150"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7), 150)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "223"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack5 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>, 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack7 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack18 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "total := @parameter1: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = (int) bitIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "155"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack9 = (int) bitIndex, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "154"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack22 = (int) superBlockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "177"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack22 = (int) superBlockIndex, 177)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = (int) bitIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "155"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack9 = (int) bitIndex, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitsField := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: ')",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "147"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: '), 147)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack18 = (int) bitIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "153"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack18 = (int) bitIndex, 153)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "blockIndex = pos / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "180"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack25 = (int) blockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "181"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack25 = (int) blockIndex, 181)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = numbits - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack2 = numbits - 1L, 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = $stack2 >>> 6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack3 = $stack2 >>> 6, 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "267"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack12 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 267)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitsField := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack18 = (int) bitIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "153"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack18 = (int) bitIndex, 153)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: ')",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "147"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: '), 147)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = -1L << numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)","(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = pos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "chunkIndex = 63L - $stack29",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack32 = (int) chunkIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "184"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack32 = (int) chunkIndex, 184)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack18 = (int) bitIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "153"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack18 = (int) bitIndex, 153)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "260"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = value",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "n := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: long",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = (int) l0",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1424"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 16",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1425"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 8",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1426"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = l3 << 2",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1428"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = l3 >>> 31",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)","(<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = l2 - $stack10",
"location": {
  "file": "",
  "class": "java.lang.Long",
  "method": "<java.lang.Long: int numberOfLeadingZeros(long)>",
  "line": "1427"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)","(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack5",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack29 = pos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "chunkIndex = 63L - $stack29",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "183"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: ')",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "147"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: '), 147)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "85"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "count = $stack120 + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "85"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, count = $stack120 + 1L, 85)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack130 = count",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "75"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack130 = count, 75)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = (int) bitIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "155"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack9 = (int) bitIndex, 155)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "154"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = data[$stack15]",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = $stack18 << $stack17",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = $stack20 >>> $stack19",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = bitIndex cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "146"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack5 = bitIndex cmp 0L, 146)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "blockIndex = pos / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "180"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack17 = pos cmp 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "162"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack17 = pos cmp 0L, 162)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: ')",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "147"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: '), 147)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "blockIndex = pos / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "180"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "max = 0L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "257"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack39 = max",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "259"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = max, 259)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "max = $stack39",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "261"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "274"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitsField := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = (long) bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = $stack3 * total",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = $stack4 + 63L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = $stack5 / 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack6",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>",
  "line": "90"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "result = $stack14 >>> j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "127"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = result | $stack21",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "128"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>",
  "line": "93"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, $stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "168"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 168)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>",
  "line": "393"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "pos := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "superBlockIndex = pos / 256L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "172"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack37 = (int) superBlockIndex",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>",
  "line": "175"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack37 = (int) superBlockIndex, 175)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "bitPos = index * $stack10",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = bitPos % 64L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "j = (int) $stack12",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "122"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = 64 - j",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = $stack22 - bitsField",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = $stack24 << $stack23",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "result = $stack26 >>> $stack25",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>",
  "line": "125"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>",
  "line": "226"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "tempCountPred = tempCountPred + $stack107",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "97"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack108 = tempCountPred - 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.triples.impl.PredicateIndexArray",
  "method": "<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>",
  "line": "98"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap375",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "bitIndex := @parameter0: long",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack14 = bitIndex + 1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>",
  "line": "158"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.bitmap.Bitmap64",
  "method": "<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>",
  "line": "120"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92)","(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = 64 - $stack4",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: int log2(long)>",
  "line": "44"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max)",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "263"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "272"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.compact.sequence.SequenceLog64",
  "method": "<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>",
  "line": "273"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "numbits := @parameter0: int",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "-1"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = -1L << numbits",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)","(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = $stack1 ^ -1L",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": ["(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)","(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "org.rdfhdt.hdt.util.BitUtil",
  "method": "<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>",
  "line": "48"
},
"stackTrace": [""]
}]
}
}

]
