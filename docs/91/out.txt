source(java.lang.Long, numberOfLeadingZeros, 1424, l2 = l2 + 32, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1424)]) => sink(java.lang.Long, numberOfLeadingZeros, 1420, l2 = 1, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1420)])

source(java.lang.Long, numberOfLeadingZeros, 1426, l3 = l3 << 8, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1426)]) => sink(java.lang.Long, numberOfLeadingZeros, 1421, l3 = (int) $stack5, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1421)])

source(java.lang.Long, numberOfLeadingZeros, 1424, l3 = (int) l0, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1424)]) => sink(java.lang.Long, numberOfLeadingZeros, 1421, l3 = (int) $stack5, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1421)])

source(java.lang.Long, numberOfLeadingZeros, 1426, l2 = l2 + 8, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1426)]) => sink(java.lang.Long, numberOfLeadingZeros, 1420, l2 = 1, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1420)])

source(java.lang.Long, numberOfLeadingZeros, 1428, l3 = l3 << 4, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1428)]) => sink(java.lang.Long, numberOfLeadingZeros, 1421, l3 = (int) $stack5, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1421)])

source(java.lang.Long, numberOfLeadingZeros, 1428, l3 = l3 << 2, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1428)]) => sink(java.lang.Long, numberOfLeadingZeros, 1421, l3 = (int) $stack5, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1421)])

source(java.lang.Long, numberOfLeadingZeros, 1428, l2 = l2 + 4, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1428)]) => sink(java.lang.Long, numberOfLeadingZeros, 1420, l2 = 1, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1420)])

source(java.lang.Long, numberOfLeadingZeros, 1428, l2 = l2 + 2, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1428)]) => sink(java.lang.Long, numberOfLeadingZeros, 1420, l2 = 1, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1420)])

source(java.lang.Class, desiredAssertionStatus, 3211, l3 = $stack13, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:75), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54), at java.lang.Class.desiredAssertionStatus(Class.java:3211)]) => sink(java.lang.Class, desiredAssertionStatus, 3211, l3 = $stack13, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:260), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.get(SequenceLog64.java:226), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54), at java.lang.Class.desiredAssertionStatus(Class.java:3211)])

source(java.lang.Class, desiredAssertionStatus, 3215, $stack5 = l1.<java.lang.ClassLoader: java.lang.Object assertionLock>, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:75), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54), at java.lang.Class.desiredAssertionStatus(Class.java:3215)]) => sink(java.lang.Class, desiredAssertionStatus, 3215, $stack5 = l1.<java.lang.ClassLoader: java.lang.Object assertionLock>, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:260), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.get(SequenceLog64.java:226), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54), at java.lang.Class.desiredAssertionStatus(Class.java:3215)])

source(java.lang.Class, desiredAssertionStatus, 3215, l2 = $stack5, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:75), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54), at java.lang.Class.desiredAssertionStatus(Class.java:3215)]) => sink(java.lang.Class, desiredAssertionStatus, 3215, l2 = $stack5, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:260), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.get(SequenceLog64.java:226), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54), at java.lang.Class.desiredAssertionStatus(Class.java:3215)])

source(java.lang.Long, numberOfLeadingZeros, 1423, $stack6 = l3 >>> 16, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1423)]) => sink(java.lang.Long, numberOfLeadingZeros, 1423, $stack6 = l3 >>> 16, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1423)])

source(java.lang.Long, numberOfLeadingZeros, 1425, $stack8 = l3 >>> 28, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1425)]) => sink(java.lang.Long, numberOfLeadingZeros, 1425, $stack8 = l3 >>> 28, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1425)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <init>, 72, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = numbits, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:72)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, aggressiveTrimToSize, 272, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:272)])

source(java.lang.Long, numberOfLeadingZeros, 1421, $stack5 = l0 >>> 32, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1421)]) => sink(java.lang.Long, numberOfLeadingZeros, 1421, $stack5 = l0 >>> 32, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1421)])

source(java.lang.Long, numberOfLeadingZeros, 1421, l3 = (int) $stack5, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1421)]) => sink(java.lang.Long, numberOfLeadingZeros, 1421, l3 = (int) $stack5, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1421)])

source(java.lang.Long, numberOfLeadingZeros, 1427, $stack10 = l3 >>> 31, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1427)]) => sink(java.lang.Long, numberOfLeadingZeros, 1427, $stack10 = l3 >>> 31, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1427)])

source(java.lang.Long, numberOfLeadingZeros, 1425, l3 = l3 << 16, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1425)]) => sink(java.lang.Long, numberOfLeadingZeros, 1421, l3 = (int) $stack5, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1421)])

source(java.lang.Long, numberOfLeadingZeros, 1425, l2 = l2 + 16, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1425)]) => sink(java.lang.Long, numberOfLeadingZeros, 1420, l2 = 1, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1420)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, numWordsFor, 90, $stack3 = (long) bitsField, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:75), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.numWordsFor(SequenceLog64.java:90)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, numWordsFor, 90, $stack3 = (long) bitsField, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:274), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.numWordsFor(SequenceLog64.java:90)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, numWordsFor, 90, $stack4 = $stack3 * total, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:75), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.numWordsFor(SequenceLog64.java:90)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, numWordsFor, 90, $stack4 = $stack3 * total, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:274), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.numWordsFor(SequenceLog64.java:90)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, numWordsFor, 90, $stack5 = $stack4 + 63L, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:75), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.numWordsFor(SequenceLog64.java:90)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, numWordsFor, 90, $stack5 = $stack4 + 63L, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:274), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.numWordsFor(SequenceLog64.java:90)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, numWordsFor, 90, $stack6 = $stack5 / 64L, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:75), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.numWordsFor(SequenceLog64.java:90)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, numWordsFor, 90, $stack6 = $stack5 / 64L, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:274), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.numWordsFor(SequenceLog64.java:90)])

source(java.lang.Long, numberOfLeadingZeros, 1427, l2 = l2 - $stack10, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1427)]) => sink(java.lang.Long, numberOfLeadingZeros, 1420, l2 = 1, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1420)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <init>, -1, SequenceLog64.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = null, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, aggressiveTrimToSize, 272, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:272)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <init>, -1, SequenceLog64.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = null, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, aggressiveTrimToSize, 272, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:272)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <init>, -1, SequenceLog64.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long maxvalue> = null, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, aggressiveTrimToSize, 273, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long maxvalue> = $stack17, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:273)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <init>, -1, SequenceLog64.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long maxvalue> = null, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, aggressiveTrimToSize, 273, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long maxvalue> = $stack17, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:273)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, aggressiveTrimToSize, 272, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:272)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <init>, -1, SequenceLog64.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = null, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:109)])

source(java.lang.Class, desiredAssertionStatus, 3216, $stack6 = l1.<java.lang.ClassLoader: java.util.Map classAssertionStatus>, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:75), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54), at java.lang.Class.desiredAssertionStatus(Class.java:3216)]) => sink(java.lang.Class, desiredAssertionStatus, 3216, $stack6 = l1.<java.lang.ClassLoader: java.util.Map classAssertionStatus>, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:260), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.get(SequenceLog64.java:226), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54), at java.lang.Class.desiredAssertionStatus(Class.java:3216)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <clinit>, 54, $stack2 = 1, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:75), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <clinit>, 54, $stack2 = 1, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:260), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.get(SequenceLog64.java:226), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <clinit>, 54, $stack2 = 0, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:75), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <clinit>, 54, $stack2 = 1, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:260), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.get(SequenceLog64.java:226), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <clinit>, 54, <org.rdfhdt.hdt.compact.sequence.SequenceLog64: boolean $assertionsDisabled> = $stack2, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:75), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <clinit>, 54, <org.rdfhdt.hdt.compact.sequence.SequenceLog64: boolean $assertionsDisabled> = $stack2, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:260), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.get(SequenceLog64.java:226), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<clinit>(SequenceLog64.java:54)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, aggressiveTrimToSize, 273, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long maxvalue> = $stack17, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:273)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <init>, -1, SequenceLog64.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long maxvalue> = null, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:109)])

source(org.rdfhdt.hdt.util.BitUtil, log2, 44, $stack2 = n cmp 0L, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44)]) => sink(org.rdfhdt.hdt.util.BitUtil, log2, 44, $stack2 = n cmp 0L, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44)])

source(org.rdfhdt.hdt.util.BitUtil, log2, 44, $stack5 = 64 - $stack4, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44)]) => sink(org.rdfhdt.hdt.util.BitUtil, log2, 44, $stack5 = 64 - $stack4, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44)])

source(org.rdfhdt.hdt.util.BitUtil, log2, 44, $stack5 = 0, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44)]) => sink(org.rdfhdt.hdt.util.BitUtil, log2, 44, $stack5 = 64 - $stack4, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44)])

source(java.lang.Long, <clinit>, 74, <java.lang.Long: java.lang.Class TYPE> = $stack0, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.<clinit>(Long.java:74)]) => sink(java.lang.Long, <clinit>, 74, <java.lang.Long: java.lang.Class TYPE> = $stack0, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.<clinit>(Long.java:74)])

source(java.lang.Long, numberOfLeadingZeros, 1420, l2 = 1, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1420)]) => sink(java.lang.Long, numberOfLeadingZeros, 1420, l2 = 1, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1420)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, resizeArray, 156, $stack2 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long[] data>, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:275), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.resizeArray(SequenceLog64.java:156)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, resizeArray, 156, $stack2 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long[] data>, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:110), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.resize(SequenceLog64.java:287), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.resizeArray(SequenceLog64.java:156)])

source(java.lang.Long, numberOfLeadingZeros, 1418, $stack4 = l0 cmp 0L, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1418)]) => sink(java.lang.Long, numberOfLeadingZeros, 1418, $stack4 = l0 cmp 0L, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1418)])

source(org.rdfhdt.hdt.util.BitUtil, maxVal, 48, $stack1 = -1L << numbits, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:73), at org.rdfhdt.hdt.util.BitUtil.maxVal(BitUtil.java:48)]) => sink(org.rdfhdt.hdt.util.BitUtil, maxVal, 48, $stack1 = -1L << numbits, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:273), at org.rdfhdt.hdt.util.BitUtil.maxVal(BitUtil.java:48)])

source(org.rdfhdt.hdt.util.BitUtil, maxVal, 48, $stack2 = $stack1 ^ -1L, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:73), at org.rdfhdt.hdt.util.BitUtil.maxVal(BitUtil.java:48)]) => sink(org.rdfhdt.hdt.util.BitUtil, maxVal, 48, $stack2 = $stack1 ^ -1L, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:273), at org.rdfhdt.hdt.util.BitUtil.maxVal(BitUtil.java:48)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, resizeArray, 156, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long[] data> = $stack3, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:275), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.resizeArray(SequenceLog64.java:156)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <init>, -1, SequenceLog64.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long[] data> = null, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:109)])

source(java.lang.Long, numberOfLeadingZeros, 1424, $stack7 = l3 >>> 24, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1424)]) => sink(java.lang.Long, numberOfLeadingZeros, 1424, $stack7 = l3 >>> 24, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1424)])

source(org.rdfhdt.hdt.compact.sequence.SequenceLog64, <init>, 73, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long maxvalue> = $stack6, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:67), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.<init>(SequenceLog64.java:73)]) => sink(org.rdfhdt.hdt.compact.sequence.SequenceLog64, aggressiveTrimToSize, 273, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long maxvalue> = $stack17, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:273)])

source(java.lang.Long, numberOfLeadingZeros, 1426, $stack9 = l3 >>> 30, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:72), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1426)]) => sink(java.lang.Long, numberOfLeadingZeros, 1426, $stack9 = l3 >>> 30, [at org.rdfhdt.hdt.triples.impl.PredicateIndexArray.generate(PredicateIndexArray.java:91), at org.rdfhdt.hdt.compact.sequence.SequenceLog64.aggressiveTrimToSize(SequenceLog64.java:263), at org.rdfhdt.hdt.util.BitUtil.log2(BitUtil.java:44), at java.lang.Long.numberOfLeadingZeros(Long.java:1426)])

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack37 = (int) superBlockIndex,175,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack37 = (int) superBlockIndex, 175)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,n := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l0 := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = (int) l0,1424,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 16,1425,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 8,1426,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 2,1428,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,$stack10 = l3 >>> 31,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l2 = l2 - $stack10,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n),44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,return $stack5,44,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = 0,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack8 = (long) i, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = i + 1,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack8 = (long) i, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack34 = (long) i,260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack34 = (long) i, 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack1 = -1L << numbits,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73) => (<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack3 = (int) $stack2,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex),149,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>,$stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, $stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 93)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,168,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 168)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,n := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l0 := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = (int) l0,1424,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 16,1425,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 8,1426,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 2,1428,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,$stack10 = l3 >>> 31,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l2 = l2 - $stack10,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n),44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,return $stack5,44,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack17 = pos cmp 0L,162,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack17 = pos cmp 0L, 162)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack9 = (int) bitIndex,155,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack9 = (int) bitIndex, 155)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack5 = bitIndex cmp 0L,146,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack5 = bitIndex cmp 0L, 146)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void resize(long)>,$stack4 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>($stack3, numentries),287,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void resize(long)>(val), 81) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void resize(long)>, $stack4 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>($stack3, numentries), 287)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack5 = bitIndex cmp 0L,146,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack5 = bitIndex cmp 0L, 146)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack5 = bitIndex cmp 0L,146,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack5 = bitIndex cmp 0L, 146)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,numbits := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,$stack2 = numbits - 1L,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack2 = numbits - 1L, 93)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,$stack3 = $stack2 >>> 6,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack3 = $stack2 >>> 6, 93)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack29 = pos % 64L,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,chunkIndex = 63L - $stack29,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>,$stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, $stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 93)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,168,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 168)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119),85,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,count = $stack120 + 1L,85,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, count = $stack120 + 1L, 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack130 = count,75,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack130 = count, 75)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119),85,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,count = $stack120 + 1L,85,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, count = $stack120 + 1L, 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack130 = count,75,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack130 = count, 75)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack17 = pos cmp 0L,162,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack17 = pos cmp 0L, 162)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>,$stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, $stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 93)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,168,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 168)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack3 = (int) $stack2,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex),149,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack7 = wordIndex + 1,150,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack7 = wordIndex + 1, 150)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7),150,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7), 150)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,blockIndex = pos / 64L,180,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack25 = (int) blockIndex,181,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack25 = (int) blockIndex, 181)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack1 = -1L << numbits,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73) => (<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>,$stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, $stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 93)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,168,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 168)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack29 = pos % 64L,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,chunkIndex = 63L - $stack29,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack32 = (int) chunkIndex,184,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack32 = (int) chunkIndex, 184)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,blockIndex = pos / 64L,180,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack25 = (int) blockIndex,181,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack25 = (int) blockIndex, 181)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,numbits := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,$stack2 = numbits - 1L,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack2 = numbits - 1L, 93)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,$stack3 = $stack2 >>> 6,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack3 = $stack2 >>> 6, 93)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack23 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,269,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack23 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 269)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,bitsField := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack3 = (int) $stack2,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex),149,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value),154,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,n := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l0 := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = (int) l0,1424,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 16,1425,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 8,1426,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 2,1428,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,$stack10 = l3 >>> 31,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l2 = l2 - $stack10,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n),44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,return $stack5,44,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack18 = (int) bitIndex,153,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack18 = (int) bitIndex, 153)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack7 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack7 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack18 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack18 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,total := @parameter1: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,blockIndex = pos / 64L,180,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119),85,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,count = $stack120 + 1L,85,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, count = $stack120 + 1L, 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack130 = count,75,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack130 = count, 75)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,blockIndex = pos / 64L,180,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack25 = (int) blockIndex,181,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack25 = (int) blockIndex, 181)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack1 = -1L << numbits,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73) => (<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack2 = n cmp 0L,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack2 = n cmp 0L, 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,if $stack2 == 0 goto $stack5 = 0,44,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value),154,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack17 = pos cmp 0L,162,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack17 = pos cmp 0L, 162)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack29 = pos % 64L,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,chunkIndex = 63L - $stack29,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack32 = (int) chunkIndex,184,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack32 = (int) chunkIndex, 184)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack18 = (int) bitIndex,153,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack18 = (int) bitIndex, 153)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack29 = pos % 64L,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,chunkIndex = 63L - $stack29,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value),154,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,bitsField := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack34 = (long) i,260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack34 = (long) i, 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,n := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l0 := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = (int) l0,1424,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 16,1425,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 8,1426,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 2,1428,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,$stack10 = l3 >>> 31,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l2 = l2 - $stack10,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n),44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,return $stack5,44,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value),154,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack9 = (int) bitIndex,155,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack9 = (int) bitIndex, 155)))

List(Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25),72,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>,specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L),67,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>,size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity),75,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,blockIndex = pos / 64L,180,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack25 = (int) blockIndex,181,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack25 = (int) blockIndex, 181)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack18 = (int) bitIndex,153,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack18 = (int) bitIndex, 153)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack17 = pos cmp 0L,162,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack17 = pos cmp 0L, 162)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2),120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitIndex < 0: "),147,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: '), 147)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack5 = bitIndex cmp 0L,146,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack5 = bitIndex cmp 0L, 146)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack37 = (int) superBlockIndex,175,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack37 = (int) superBlockIndex, 175)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack29 = pos % 64L,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,chunkIndex = 63L - $stack29,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack32 = (int) chunkIndex,184,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack32 = (int) chunkIndex, 184)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = 0,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack8 = (long) i, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = i + 1,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack8 = (long) i, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack34 = (long) i,260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack34 = (long) i, 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,n := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l0 := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = (int) l0,1424,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 16,1425,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 8,1426,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 2,1428,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,$stack10 = l3 >>> 31,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l2 = l2 - $stack10,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n),44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,return $stack5,44,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack1 = -1L << numbits,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73) => (<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2),120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,wordNum = (int) $stack3,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, wordNum = (int) $stack3, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum),122,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum), 122)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7,122,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7, 122)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack22 = (int) superBlockIndex,177,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack22 = (int) superBlockIndex, 177)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = 0L,257,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = max,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = max, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,bitsField := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack12 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,267,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack12 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 267)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,bitsField := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2),120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack37 = (int) superBlockIndex,175,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack37 = (int) superBlockIndex, 175)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack7 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack7 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack12 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,267,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack12 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 267)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,bitsField := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,blockIndex = pos / 64L,180,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack3 = (int) $stack2,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex),149,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack7 = wordIndex + 1,150,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack7 = wordIndex + 1, 150)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7),150,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7), 150)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack17 = pos cmp 0L,162,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack17 = pos cmp 0L, 162)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitIndex < 0: "),147,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: '), 147)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack37 = (int) superBlockIndex,175,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack37 = (int) superBlockIndex, 175)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack29 = pos % 64L,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,chunkIndex = 63L - $stack29,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack32 = (int) chunkIndex,184,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack32 = (int) chunkIndex, 184)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack9 = (int) bitIndex,155,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack9 = (int) bitIndex, 155)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,numbits := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,$stack2 = numbits - 1L,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack2 = numbits - 1L, 93)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,$stack3 = $stack2 >>> 6,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack3 = $stack2 >>> 6, 93)))

List(Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack59 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack58),112,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack59 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack58), 112)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = numbits,72,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = numbits, 72)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void resize(long)>,$stack3 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,287,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void resize(long)>(val), 81) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void resize(long)>, $stack3 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 287)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack29 = pos % 64L,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,chunkIndex = 63L - $stack29,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack29 = pos % 64L,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,chunkIndex = 63L - $stack29,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,numbits := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,$stack2 = numbits - 1L,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack2 = numbits - 1L, 93)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,$stack3 = $stack2 >>> 6,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack3 = $stack2 >>> 6, 93)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,n := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l0 := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = (int) l0,1424,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 16,1425,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 8,1426,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 2,1428,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,$stack10 = l3 >>> 31,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l2 = l2 - $stack10,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n),44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,return $stack5,44,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack9 = (int) bitIndex,155,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack9 = (int) bitIndex, 155)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,blockIndex = pos / 64L,180,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = 0L,257,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = max,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = max, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,n := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l0 := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = (int) l0,1424,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 16,1425,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 8,1426,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 2,1428,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,$stack10 = l3 >>> 31,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l2 = l2 - $stack10,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n),44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,return $stack5,44,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack1 = -1L << numbits,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73) => (<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value),154,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,bitsField := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,numbits := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,$stack2 = numbits - 1L,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack2 = numbits - 1L, 93)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,$stack3 = $stack2 >>> 6,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack3 = $stack2 >>> 6, 93)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119),85,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,count = $stack120 + 1L,85,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, count = $stack120 + 1L, 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack130 = count,75,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack130 = count, 75)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2),120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,wordNum = (int) $stack3,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, wordNum = (int) $stack3, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum),122,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum), 122)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7,122,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7, 122)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack37 = (int) superBlockIndex,175,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack37 = (int) superBlockIndex, 175)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2),120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,wordNum = (int) $stack3,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, wordNum = (int) $stack3, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum),122,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum), 122)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7,122,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7, 122)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack3 = (int) $stack2,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex),149,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack18 = (int) bitIndex,153,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack18 = (int) bitIndex, 153)))

List(Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,numbits := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,$stack2 = numbits - 1L,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack2 = numbits - 1L, 93)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>,$stack3 = $stack2 >>> 6,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack31.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>($stack34), 94) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void <init>(long)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>(nbits), 65) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void <init>(long)>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>(nbits), 69) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>, $stack3 = $stack2 >>> 6, 93)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119),85,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,count = $stack120 + 1L,85,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, count = $stack120 + 1L, 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack130 = count,75,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack130 = count, 75)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitIndex < 0: "),147,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: '), 147)))

List(Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25),72,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = 0L,257,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = max,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = max, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack1 = -1L << numbits,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73) => (<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack3 = (int) $stack2,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex),149,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack7 = wordIndex + 1,150,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack7 = wordIndex + 1, 150)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7),150,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7), 150)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>,size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity),75,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>,$stack14 = size cmp 2147483647L,79,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack14 = size cmp 2147483647L, 79)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,blockIndex = pos / 64L,180,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack18 = (int) bitIndex,153,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack18 = (int) bitIndex, 153)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitIndex < 0: "),147,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: '), 147)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack34 = (long) i,260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack34 = (long) i, 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack1 = -1L << numbits,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73) => (<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack3 = (int) $stack2,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex),149,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack7 = wordIndex + 1,150,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack7 = wordIndex + 1, 150)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7),150,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7), 150)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack9 = (int) bitIndex,155,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack9 = (int) bitIndex, 155)))

List(Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>,$stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits),73,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack3 = (int) $stack2,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex),149,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack7 = wordIndex + 1,150,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack7 = wordIndex + 1, 150)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7),150,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7), 150)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack22 = (int) superBlockIndex,177,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack22 = (int) superBlockIndex, 177)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack22 = (int) superBlockIndex,177,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack22 = (int) superBlockIndex, 177)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>,$stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, $stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 93)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,168,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 168)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack30 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,268,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack30 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 268)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,bitsField := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,n := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l0 := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = (int) l0,1424,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 16,1425,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 8,1426,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 2,1428,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,$stack10 = l3 >>> 31,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l2 = l2 - $stack10,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n),44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,return $stack5,44,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,bitsField := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,blockIndex = pos / 64L,180,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack25 = (int) blockIndex,181,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack25 = (int) blockIndex, 181)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack17 = pos cmp 0L,162,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack17 = pos cmp 0L, 162)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack1 = -1L << numbits,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73) => (<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack18 = (int) bitIndex,153,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack18 = (int) bitIndex, 153)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack5 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>,223,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack5 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>, 223)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack7 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack7 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack18 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack18 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numentries>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,total := @parameter1: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack22 = (int) superBlockIndex,177,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack22 = (int) superBlockIndex, 177)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,n := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l0 := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = (int) l0,1424,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 16,1425,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 8,1426,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 2,1428,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,$stack10 = l3 >>> 31,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l2 = l2 - $stack10,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n),44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,return $stack5,44,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack1 = -1L << numbits,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73) => (<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,bitsField := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack3 = (int) $stack2,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex),149,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack7 = wordIndex + 1,150,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack7 = wordIndex + 1, 150)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7),150,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void ensureSize(int)>($stack7), 150)))

List(Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,bitsField := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119),85,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,count = $stack120 + 1L,85,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, count = $stack120 + 1L, 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack130 = count,75,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack130 = count, 75)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2),120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack3 = (int) $stack2,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex),149,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack1 = -1L << numbits,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73) => (<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack9 = (int) bitIndex,155,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack9 = (int) bitIndex, 155)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2),120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,wordNum = (int) $stack3,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, wordNum = (int) $stack3, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum),122,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum), 122)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7,122,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7, 122)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2),120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,wordNum = (int) $stack3,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, wordNum = (int) $stack3, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum),122,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum), 122)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7,122,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7, 122)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack34 = (long) i,260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack34 = (long) i, 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,bitsField := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>,$stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,93,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, $stack7 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 93)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,168,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack19 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 168)))

List(Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack48 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack47),109,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack48 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack47), 109)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,specialinvoke $stack44.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>($stack48, $stack51),109,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack44.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>($stack48, $stack51), 109)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack29 = pos % 64L,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,chunkIndex = 63L - $stack29,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack3 = (int) $stack2,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex),149,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack1 = -1L << numbits,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73) => (<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2),120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,wordNum = (int) $stack3,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, wordNum = (int) $stack3, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum),122,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack7 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($stack6, wordNum), 122)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7,122,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long[] words> = $stack7, 122)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,blockIndex = pos / 64L,180,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2),120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)))

List(Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack59 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack58),112,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack59 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack58), 112)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2),120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack22 = (int) superBlockIndex,177,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack22 = (int) superBlockIndex, 177)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack29 = pos % 64L,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,chunkIndex = 63L - $stack29,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack32 = (int) chunkIndex,184,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack32 = (int) chunkIndex, 184)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,blockIndex = pos / 64L,180,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack29 = pos % 64L,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,chunkIndex = 63L - $stack29,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack32 = (int) chunkIndex,184,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack32 = (int) chunkIndex, 184)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack29 = pos % 64L,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack29 = pos % 64L, 183)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,chunkIndex = 63L - $stack29,183,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, chunkIndex = 63L - $stack29, 183)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack5 = bitIndex cmp 0L,146,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack5 = bitIndex cmp 0L, 146)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,273,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack16 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 273)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,numbits := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack1 = -1L << numbits,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73) => (<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>, $stack1 = -1L << numbits, 48)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,$stack2 = $stack1 ^ -1L,48,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack6 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>(numbits), 73)) => Node(<org.rdfhdt.hdt.util.BitUtil: long maxVal(int)>,return $stack2,48,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max),263,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, i = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>(max), 263)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i,272,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits> = i, 272)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>,274,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack19 = this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: int numbits>, 274)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,bitsField := @parameter0: int,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,return $stack6,90,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack3 = (long) bitsField,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack3 = (long) bitsField, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack4 = $stack3 * total,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack4 = $stack3 * total, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack5 = $stack4 + 63L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>, $stack5 = $stack4 + 63L, 90)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>,$stack6 = $stack5 / 64L,90,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>,size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity),75,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, size = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long numWordsFor(int,long)>(numbits, capacity), 75)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>,$stack9 = (int) size,78,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack9 = (int) size, 78)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>,$stack10 = staticinvoke <java.lang.Math: int max(int,int)>($stack9, 1),78,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack10 = staticinvoke <java.lang.Math: int max(int,int)>($stack9, 1), 78)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>,$stack11 = newarray (long)[$stack10],78,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>, specialinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>(numbits, 0L), 67) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int,long)>, $stack11 = newarray (long)[$stack10], 78)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack2 = bitIndex >>> 6,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>, $stack2 = bitIndex >>> 6, 89)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>,$stack3 = (int) $stack2,89,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex),149,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, wordIndex = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: int wordIndex(long)>(bitIndex), 149)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack22 = (int) superBlockIndex,177,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack22 = (int) superBlockIndex, 177)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34),260,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, value = virtualinvoke this.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack34), 260)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,$stack39 = value,259,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack39 = value, 259)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>,max = $stack39,261,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>, $stack36 = value cmp max, 261)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,n := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l0 := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = (int) l0,1424,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = (int) l0, 1424)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 16,1425,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 16, 1425)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 8,1426,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 8, 1426)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l3 = l3 << 2,1428,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, l3 = l3 << 2, 1428)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,$stack10 = l3 >>> 31,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44) => (<java.lang.Long: int numberOfLeadingZeros(long)>, $stack10 = l3 >>> 31, 1427)) => Node(<java.lang.Long: int numberOfLeadingZeros(long)>,l2 = l2 - $stack10,1427,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n),44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72) => (<org.rdfhdt.hdt.util.BitUtil: int log2(long)>, $stack4 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(n), 44)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,$stack5 = 64 - $stack4,44,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack26 = staticinvoke <org.rdfhdt.hdt.util.BitUtil: int log2(long)>($stack25), 72)) => Node(<org.rdfhdt.hdt.util.BitUtil: int log2(long)>,return $stack5,44,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitIndex < 0: "),147,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: '), 147)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,superBlockIndex = pos / 256L,172,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, superBlockIndex = pos / 256L, 172)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack37 = (int) superBlockIndex,175,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack37 = (int) superBlockIndex, 175)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack18 = data[$stack15],128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack18 = data[$stack15], 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack20 = $stack18 << $stack17,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack20 = $stack18 << $stack17, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack21 = $stack20 >>> $stack19,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack21 = $stack20 >>> $stack19, 128)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack5 = bitIndex cmp 0L,146,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack5 = bitIndex cmp 0L, 146)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>,120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack2 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits>, 120)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>,$stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2),120,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>(), 166) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void updateIndex()>, virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void trimToSize()>(), 92) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void trimToSize()>, $stack3 = staticinvoke <org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numWords(long)>($stack2), 120)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack14 >>> j,127,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, result = $stack14 >>> j, 127)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = result | $stack21,128,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value),154,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack14 = bitIndex + 1L,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack14 = bitIndex + 1L, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14),158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack16 = staticinvoke <java.lang.Math: long max(long,long)>($stack15, $stack14), 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16,158,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: long numbits> = $stack16, 158)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>,$stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>,393,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack1 = this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long numbits>, 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,pos := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,blockIndex = pos / 64L,180,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, blockIndex = pos / 64L, 180)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>,$stack25 = (int) blockIndex,181,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack60 = virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>(), 112) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long countOnes()>, $stack2 = virtualinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>($stack1), 393) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: long rank1(long)>, $stack25 = (int) blockIndex, 181)))

List(Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,bitPos = index * $stack10,120,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, bitPos = index * $stack10, 120)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack12 = bitPos % 64L,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack12 = bitPos % 64L, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,j = (int) $stack12,122,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, j = (int) $stack12, 122)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack22 = 64 - j,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack22 = 64 - j, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack23 = $stack22 - bitsField,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack23 = $stack22 - bitsField, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,$stack26 = $stack24 << $stack23,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>, $stack26 = $stack24 << $stack23, 125)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>,result = $stack26 >>> $stack25,125,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85) => (<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>, $stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position), 226)) => Node(<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>,$stack9 = staticinvoke <org.rdfhdt.hdt.compact.sequence.SequenceLog64: long getField(long[],int,long)>($stack8, $stack7, position),226,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack120 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>($stack119), 85)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i),97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack107 = virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: long get(long)>(i), 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,tempCountPred = tempCountPred + $stack107,97,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, tempCountPred = tempCountPred + $stack107, 97)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack108 = tempCountPred - 1L,98,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, $stack108 = tempCountPred - 1L, 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,bitIndex := @parameter0: long,-1,SimpleNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154)) => Node(<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>,$stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bitIndex < 0: "),147,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke i#6.<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>($stack108, 1), 98) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap375: void set(long,boolean)>, specialinvoke this.<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>(bitIndex, value), 154) => (<org.rdfhdt.hdt.compact.bitmap.Bitmap64: void set(long,boolean)>, $stack28 = virtualinvoke $stack27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('bitIndex < 0: '), 147)))

List(Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,$stack22 = new org.rdfhdt.hdt.compact.sequence.SequenceLog64,72,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, specialinvoke $stack22.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void <init>(int)>($stack26), 72)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,predCount = $stack22,72,SourceNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, predCount = $stack22, 72)) => Node(<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>,virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(),91,SinkNode, path: (<org.rdfhdt.hdt.triples.impl.PredicateIndexArray: void generate(org.rdfhdt.hdt.listener.ProgressListener)>, virtualinvoke predCount.<org.rdfhdt.hdt.compact.sequence.SequenceLog64: void aggressiveTrimToSize()>(), 91)))

