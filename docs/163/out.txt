SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("X-HTTP-Method-Override"),85,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('X-HTTP-Method-Override'), 85)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(),89,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>,$stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lspark/route/HttpMethod;", name),22,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124) => (<spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>, $stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class 'Lspark/route/HttpMethod;', name), 22)) => Node(<spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>,$stack2 = (spark.route.HttpMethod) $stack1,22,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr),124,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#15, uri, acceptType),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#15, uri, acceptType), 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 104)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,58,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 104)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),131,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 131)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#25 = (spark.RouteImpl) filterTarget,142,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#25 = (spark.RouteImpl) filterTarget, 142)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#24 = virtualinvoke response#25.<spark.RouteImpl: java.lang.String render(java.lang.Object)>(element),151,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#24 = virtualinvoke response#25.<spark.RouteImpl: java.lang.String render(java.lang.Object)>(element), 151)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = request#24,155,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#24, 155)) => Node(<java.lang.String: byte[] getBytes(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232)) => Node(<java.lang.String: byte[] getBytes(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,918,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232) => (<java.lang.String: byte[] getBytes(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 918)) => Node(<java.lang.String: byte[] getBytes(java.lang.String)>,$stack3 = lengthof $stack2,918,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232) => (<java.lang.String: byte[] getBytes(java.lang.String)>, $stack3 = lengthof $stack2, 918)) => Node(<java.lang.String: byte[] getBytes(java.lang.String)>,$stack5 = staticinvoke <java.lang.StringCoding: byte[] encode(java.lang.String,char[],int,int)>(l1, $stack4, 0, $stack3),918,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("<html><body><h2>404 Not found</h2></body></html>", $stack66),222,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('<html><body><h2>404 Not found</h2></body></html>', $stack66), 222)) => Node(<java.lang.String: byte[] getBytes(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232)) => Node(<java.lang.String: byte[] getBytes(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,918,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232) => (<java.lang.String: byte[] getBytes(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 918)) => Node(<java.lang.String: byte[] getBytes(java.lang.String)>,$stack3 = lengthof $stack2,918,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232) => (<java.lang.String: byte[] getBytes(java.lang.String)>, $stack3 = lengthof $stack2, 918))

SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(),87,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(), 87)) => Node(<java.lang.String: java.lang.String toLowerCase()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89) => (<java.lang.String: java.lang.String toLowerCase()>, $stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1), 2670)) => Node(<java.lang.String: java.lang.String toLowerCase()>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($stack1),2670,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(),89,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>,name := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>,$stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lspark/route/HttpMethod;", name),22,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124) => (<spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>, $stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class 'Lspark/route/HttpMethod;', name), 22)) => Node(<spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>,$stack2 = (spark.route.HttpMethod) $stack1,22,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr),124,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#15, uri, acceptType),127,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#15, uri, acceptType), 127)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 104)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,58,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 104)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),131,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 131)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,response#25 = (spark.RouteImpl) filterTarget,142,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, response#25 = (spark.RouteImpl) filterTarget, 142)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#24 = virtualinvoke response#25.<spark.RouteImpl: java.lang.String render(java.lang.Object)>(element),151,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#24 = virtualinvoke response#25.<spark.RouteImpl: java.lang.String render(java.lang.Object)>(element), 151)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = request#24,155,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#24, 155)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>("utf-8"),232,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("<html><body><h2>404 Not found</h2></body></html>", $stack66),222,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('<html><body><h2>404 Not found</h2></body></html>', $stack66), 222)) => Node(<java.lang.String: byte[] getBytes(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232)) => Node(<java.lang.String: byte[] getBytes(java.lang.String)>,$stack4 = l0.<java.lang.String: char[] value>,918,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232) => (<java.lang.String: byte[] getBytes(java.lang.String)>, $stack4 = l0.<java.lang.String: char[] value>, 918)) => Node(<java.lang.String: byte[] getBytes(java.lang.String)>,$stack5 = staticinvoke <java.lang.StringCoding: byte[] encode(java.lang.String,char[],int,int)>(l1, $stack4, 0, $stack3),918,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>("utf-8"),232,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232))

List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(),87,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(), 87)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(),89,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr),124,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if httpMethod#15 != $stack45 goto (branch),132,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent != null goto (branch),154,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack95 == null goto $stack96 = null,135,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = "",138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = null,138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = $stack96,135,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = "",210,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent == null goto $stack71 = 0,213,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 1,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 0,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet#50 = $stack71,213,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),215,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack68 == 0 goto (branch),226,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),219,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack58 != 0 goto (branch),232,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack66 = newarray (java.lang.Object)[0],222,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('<html><body><h2>404 Not found</h2></body></html>', $stack66), 222)))

List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("X-HTTP-Method-Override"),85,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('X-HTTP-Method-Override'), 85)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(),87,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(), 87)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(),89,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr),124,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if httpMethod#15 != $stack45 goto (branch),132,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent != null goto (branch),154,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack95 == null goto $stack96 = null,135,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = "",138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = null,138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = $stack96,135,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = "",210,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent == null goto $stack71 = 0,213,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 1,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 0,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet#50 = $stack71,213,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),215,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack68 == 0 goto (branch),226,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),219,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack58 != 0 goto (branch),232,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] has not been mapped in Spark"),220,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('] has not been mapped in Spark'), 220)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(),220,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(), 220)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,interfaceinvoke $stack61.<org.slf4j.Logger: void info(java.lang.String)>($stack65),220,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, interfaceinvoke $stack61.<org.slf4j.Logger: void info(java.lang.String)>($stack65), 220)))

List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>("X-HTTP-Method-Override"),85,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>('X-HTTP-Method-Override'), 85)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(),87,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(), 87)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(),89,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr),124,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if httpMethod#15 != $stack45 goto (branch),132,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent != null goto (branch),154,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack95 == null goto $stack96 = null,135,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = "",138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = null,138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = $stack96,135,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = "",210,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent == null goto $stack71 = 0,213,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 1,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 0,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet#50 = $stack71,213,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),215,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack68 == 0 goto (branch),226,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),219,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack58 != 0 goto (branch),232,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack66 = newarray (java.lang.Object)[0],222,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('<html><body><h2>404 Not found</h2></body></html>', $stack66), 222)))

List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(),89,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr),124,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if httpMethod#15 != $stack45 goto (branch),132,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent != null goto (branch),154,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack95 == null goto $stack96 = null,135,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = "",138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = null,138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = $stack96,135,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = "",210,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent == null goto $stack71 = 0,213,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 1,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 0,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet#50 = $stack71,213,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),215,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack68 == 0 goto (branch),226,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),219,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack58 != 0 goto (branch),232,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] has not been mapped in Spark"),220,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('] has not been mapped in Spark'), 220)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(),220,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(), 220)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,interfaceinvoke $stack61.<org.slf4j.Logger: void info(java.lang.String)>($stack65),220,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, interfaceinvoke $stack61.<org.slf4j.Logger: void info(java.lang.String)>($stack65), 220)))

List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if method != null goto httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(),86,SourceNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(),87,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(), 87)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(),89,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr),124,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if httpMethod#15 != $stack45 goto (branch),132,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent != null goto (branch),154,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack95 == null goto $stack96 = null,135,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = "",138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = null,138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = $stack96,135,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = "",210,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent == null goto $stack71 = 0,213,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 1,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 0,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet#50 = $stack71,213,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),215,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack68 == 0 goto (branch),226,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),219,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack58 != 0 goto (branch),232,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack66 = newarray (java.lang.Object)[0],222,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('<html><body><h2>404 Not found</h2></body></html>', $stack66), 222)))

List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(),87,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(), 87)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(),89,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr),124,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if httpMethod#15 != $stack45 goto (branch),132,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent != null goto (branch),154,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack95 == null goto $stack96 = null,135,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = "",138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = null,138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = $stack96,135,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = "",210,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent == null goto $stack71 = 0,213,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 1,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 0,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet#50 = $stack71,213,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),215,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack68 == 0 goto (branch),226,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),219,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack58 != 0 goto (branch),232,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] has not been mapped in Spark"),220,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('] has not been mapped in Spark'), 220)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(),220,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(), 220)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,interfaceinvoke $stack61.<org.slf4j.Logger: void info(java.lang.String)>($stack65),220,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, interfaceinvoke $stack61.<org.slf4j.Logger: void info(java.lang.String)>($stack65), 220)))

List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if method != null goto httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(),86,SourceNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(),87,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, method = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getMethod()>(), 87)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(),89,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr),124,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if httpMethod#15 != $stack45 goto (branch),132,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent != null goto (branch),154,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack95 == null goto $stack96 = null,135,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = "",138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = null,138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = $stack96,135,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = "",210,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent == null goto $stack71 = 0,213,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 1,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 0,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet#50 = $stack71,213,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),215,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack68 == 0 goto (branch),226,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),219,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack58 != 0 goto (branch),232,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] has not been mapped in Spark"),220,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack64 = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('] has not been mapped in Spark'), 220)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(),220,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack65 = virtualinvoke $stack64.<java.lang.StringBuilder: java.lang.String toString()>(), 220)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,interfaceinvoke $stack61.<org.slf4j.Logger: void info(java.lang.String)>($stack65),220,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, interfaceinvoke $stack61.<org.slf4j.Logger: void info(java.lang.String)>($stack65), 220)))

List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(),89,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethodStr = virtualinvoke method.<java.lang.String: java.lang.String toLowerCase()>(), 89)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr),124,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, httpMethod#15 = staticinvoke <spark.route.HttpMethod: spark.route.HttpMethod valueOf(java.lang.String)>(httpMethodStr), 124)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if httpMethod#15 != $stack45 goto (branch),132,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent != null goto (branch),154,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack95 == null goto $stack96 = null,135,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = "",138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack96 = null,138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = $stack96,135,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack96, 135)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = "",210,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack54 = virtualinvoke bodyContent.<java.lang.String: byte[] getBytes(java.lang.String)>('utf-8'), 232)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent == null goto $stack71 = 0,213,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 1,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack71 = 0,216,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet#50 = $stack71,213,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet#50 = $stack71, 213)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),215,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack68 == 0 goto (branch),226,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if matchSet#50 != 0 goto (branch),219,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack58 != 0 goto (branch),232,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack66 = newarray (java.lang.Object)[0],222,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('<html><body><h2>404 Not found</h2></body></html>', $stack66), 222)))

