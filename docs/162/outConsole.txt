Running soot scenario spark;spark.webserver.MatcherFilter;doFilter(ServletRequest, ServletResponse, FilterChain);5e183332a2b897bcf233ab1b8fcc9d6c59a8a60b
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/5e183332a2b897bcf233ab1b8fcc9d6c59a8a60b/original-without-dependencies/spark-core-2.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,45700
Time to perform Confluence 1 Inter 2,20300
Configure Soot Confluence 2 Inter 0,24200
Time to perform Confluence 2 Inter 1,83000
Visited methods: 148
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#23 = null,143,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = request#23,162,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)) => Node(<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>,element := @parameter1: java.lang.Object,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent), 243)) => Node(<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>,virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element),21,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent), 243) => (<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 21))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(),92,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(), 92)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType),130,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType), 130)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 108)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,58,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 108)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),134,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 134)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter#24 = (spark.RouteImpl) filterTarget,145,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter#24 = (spark.RouteImpl) filterTarget, 145)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#23 = virtualinvoke filter#24.<spark.RouteImpl: java.lang.Object render(java.lang.Object)>(bodyAfterFilter#26),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#23 = virtualinvoke filter#24.<spark.RouteImpl: java.lang.Object render(java.lang.Object)>(bodyAfterFilter#26), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = request#23,162,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)) => Node(<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>,element := @parameter1: java.lang.Object,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$787432437, bodyContent), 243)) => Node(<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>,virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element),21,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$787432437, bodyContent), 243) => (<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 21)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = null,95,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent), 243)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent == null goto $stack71 = 0,224,SinkNode, path: )
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(),92,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(), 92)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,matchSet = virtualinvoke $stack47.<spark.route.SimpleRouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack46, uri, acceptType),170,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, matchSet = virtualinvoke $stack47.<spark.route.SimpleRouteMatcher: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack46, uri, acceptType), 170)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#31 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),172,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#31 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 172)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack75 = interfaceinvoke request#31.<java.util.Iterator: java.lang.Object next()>(),224,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack75 = interfaceinvoke request#31.<java.util.Iterator: java.lang.Object next()>(), 224)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#23 = null,143,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = request#23,162,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(),92,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(), 92)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType),130,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType), 130)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 108)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,58,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 108)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),134,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 134)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter#24 = (spark.RouteImpl) filterTarget,145,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter#24 = (spark.RouteImpl) filterTarget, 145)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#23 = virtualinvoke filter#24.<spark.RouteImpl: java.lang.Object render(java.lang.Object)>(bodyAfterFilter#26),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#23 = virtualinvoke filter#24.<spark.RouteImpl: java.lang.Object render(java.lang.Object)>(bodyAfterFilter#26), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = request#23,162,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = null,95,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent), 243)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent != null goto (branch),161,SinkNode, path: )
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(),92,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(), 92)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType),130,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType), 130)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 108)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,58,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 108)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),134,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 134)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter#24 = (spark.RouteImpl) filterTarget,145,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter#24 = (spark.RouteImpl) filterTarget, 145)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#23 = virtualinvoke filter#24.<spark.RouteImpl: java.lang.Object render(java.lang.Object)>(bodyAfterFilter#26),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#23 = virtualinvoke filter#24.<spark.RouteImpl: java.lang.Object render(java.lang.Object)>(bodyAfterFilter#26), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if request#23 == null goto (branch),161,SinkNode, path: ), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = null,95,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent), 243)) => Node(<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>,element := @parameter1: java.lang.Object,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent), 243)) => Node(<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>,element := @parameter1: java.lang.Object,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent), 243) => (<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 21)) => Node(<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>,$stack3 = virtualinvoke this.<spark.webserver.Serializer: boolean canHandle(java.lang.Object)>(element),36,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent), 243) => (<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 21) => (<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>, $stack3 = virtualinvoke this.<spark.webserver.Serializer: boolean canHandle(java.lang.Object)>(element), 36)) => Node(<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>,if $stack3 == 0 goto $stack4 = this.<spark.webserver.Serializer: spark.webserver.Serializer next>,36,SinkNode, path: )
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(),92,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(), 92)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType),130,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType), 130)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 108)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,58,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 108)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),134,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 134)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter#24 = (spark.RouteImpl) filterTarget,145,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter#24 = (spark.RouteImpl) filterTarget, 145)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#23 = virtualinvoke filter#24.<spark.RouteImpl: java.lang.Object render(java.lang.Object)>(bodyAfterFilter#26),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#23 = virtualinvoke filter#24.<spark.RouteImpl: java.lang.Object render(java.lang.Object)>(bodyAfterFilter#26), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = request#23,162,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)) => Node(<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>,element := @parameter1: java.lang.Object,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$787432437, bodyContent), 243)) => Node(<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>,element := @parameter1: java.lang.Object,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$787432437, bodyContent), 243) => (<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 21)) => Node(<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>,$stack3 = virtualinvoke this.<spark.webserver.Serializer: boolean canHandle(java.lang.Object)>(element),36,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$787432437, bodyContent), 243) => (<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 21) => (<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>, $stack3 = virtualinvoke this.<spark.webserver.Serializer: boolean canHandle(java.lang.Object)>(element), 36)) => Node(<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>,if $stack3 == 0 goto $stack4 = this.<spark.webserver.Serializer: spark.webserver.Serializer next>,36,SinkNode, path: ), SOURCE=>BASE: Node(<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>,$stack5 = this.<spark.webserver.Serializer: spark.webserver.Serializer next>,40,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent), 243) => (<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 21) => (<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>, $stack5 = this.<spark.webserver.Serializer: spark.webserver.Serializer next>, 40)) => Node(<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>,virtualinvoke $stack5.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element),40,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent), 243) => (<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 21) => (<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack5.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 40))
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(),92,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(), 92)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType),130,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType), 130)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 108)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,58,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 108)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),134,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 134)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter#24 = (spark.RouteImpl) filterTarget,145,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter#24 = (spark.RouteImpl) filterTarget, 145)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#23 = virtualinvoke filter#24.<spark.RouteImpl: java.lang.Object render(java.lang.Object)>(bodyAfterFilter#26),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#23 = virtualinvoke filter#24.<spark.RouteImpl: java.lang.Object render(java.lang.Object)>(bodyAfterFilter#26), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = request#23,162,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)) => Node(<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>,element := @parameter1: java.lang.Object,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$787432437, bodyContent), 243)) => Node(<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>,element := @parameter1: java.lang.Object,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$787432437, bodyContent), 243) => (<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 21)) => Node(<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>,virtualinvoke $stack5.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element),40,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$787432437, bodyContent), 243) => (<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 21) => (<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack5.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 40)), SOURCE=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#23 = null,143,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = request#23,162,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent != null goto (branch),220,SinkNode, path: )
SINK=>BASE: Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(),92,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(), 92)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType),130,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType), 130)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.route.RouteMatch,-1,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 108)) => Node(<spark.route.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.route.RouteMatch: java.lang.Object target>,58,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 108)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),134,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 134)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filter#24 = (spark.RouteImpl) filterTarget,145,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filter#24 = (spark.RouteImpl) filterTarget, 145)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#23 = virtualinvoke filter#24.<spark.RouteImpl: java.lang.Object render(java.lang.Object)>(bodyAfterFilter#26),158,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, request#23 = virtualinvoke filter#24.<spark.RouteImpl: java.lang.Object render(java.lang.Object)>(bodyAfterFilter#26), 158)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = request#23,162,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if bodyContent != null goto (branch),220,SinkNode, path: )]
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 162 and 92 to line 243, defined in bodyContent = request#23 and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>() and used in virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$787432437, bodyContent)
Caused by line 162 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)
Caused by line 92 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(), 92)
Caused by line 243 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$787432437, bodyContent), 243) => (<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>, virtualinvoke $stack3.<spark.webserver.Serializer: void processElement(java.io.OutputStream,java.lang.Object)>(outputStream, element), 21)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 243 and 92 to line 224, defined in virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent) and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>() and used in $stack75 = interfaceinvoke request#31.<java.util.Iterator: java.lang.Object next()>()
Caused by line 243 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent), 243)
Caused by line 92 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(), 92)
Caused by line 224 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack75 = interfaceinvoke request#31.<java.util.Iterator: java.lang.Object next()>(), 224)
Confluence interference in <spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>
Confluence flows from execution of lines 162 and 92 to line 162, defined in bodyContent = request#23 and uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>() and used in bodyContent = request#23
Caused by line 162 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)
Caused by line 92 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(), 92)
Caused by line 162 flow: path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/5e183332a2b897bcf233ab1b8fcc9d6c59a8a60b/original-without-dependencies/spark-core-2.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,57600
Runtime: 0.03s
Time to perform OA Inter 0,70900
OA Inter Visited methods: 67
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/5e183332a2b897bcf233ab1b8fcc9d6c59a8a60b/original-without-dependencies/spark-core-2.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,40800
Time to perform DFP Inter 1,65700
Depth limit: 5
CONFLICTS: []
Visited methods: 74
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/5e183332a2b897bcf233ab1b8fcc9d6c59a8a60b/original-without-dependencies/spark-core-2.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,38300
Time to perform DFP Inter 1,62700
Depth limit: 5
CONFLICTS: []
Visited methods: 74
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/5e183332a2b897bcf233ab1b8fcc9d6c59a8a60b/original-without-dependencies/spark-core-2.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,45100
Time to perform PDG 0,73700
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/5e183332a2b897bcf233ab1b8fcc9d6c59a8a60b/original-without-dependencies/spark-core-2.2-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,51200
Time to perform PDG 0,69100
CONFLICTS: [List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(),92,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(), 92)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack111 = virtualinvoke $stack110.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack109, uri, acceptType),138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack111 = virtualinvoke $stack110.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack109, uri, acceptType), 138)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if $stack111 == null goto $stack112 = null,138,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack112 = "",141,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack112, 138)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = $stack112,138,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = $stack112, 138)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = bodyAfterFilter,190,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = bodyAfterFilter, 190)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,bodyContent = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("<html><body><h2>404 Not found</h2></body></html>", $stack66),233,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>('<html><body><h2>404 Not found</h2></body></html>', $stack66), 233)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent),243,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, virtualinvoke $stack53.<spark.webserver.SerializerChain: void process(java.io.OutputStream,java.lang.Object)>(tmp$566042862, bodyContent), 243))), List(Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(),92,SourceNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getPathInfo()>(), 92)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType),130,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterMatch = virtualinvoke $stack43.<spark.route.SimpleRouteMatcher: spark.route.RouteMatch findTargetForRequestedRoute(spark.route.HttpMethod,java.lang.String,java.lang.String)>(httpMethod#14, uri, acceptType), 130)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(),134,SimpleNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, filterTarget = virtualinvoke filterMatch.<spark.route.RouteMatch: java.lang.Object getTarget()>(), 134)) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,if filterTarget == null goto $stack47 = this.<spark.webserver.MatcherFilter: spark.route.SimpleRouteMatcher routeMatcher>,141,SimpleNode, path: ) => Node(<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,request#23 = null,143,SinkNode, path: (<spark.webserver.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, bodyContent = request#23, 162)))]
 Analysis results
----------------------------
 Number of conflicts: 2
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
