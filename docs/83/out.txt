List(Node(<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>,$stack17 = virtualinvoke triple.<org.rdfhdt.hdt.triples.TripleID: boolean isNoMatch()>(),347,SourceNode, path: (<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>, $stack17 = virtualinvoke triple.<org.rdfhdt.hdt.triples.TripleID: boolean isNoMatch()>(), 347)) => Node(<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>,if $stack17 == 0 goto $stack18 = this.<org.rdfhdt.hdt.hdt.impl.HDTImpl: boolean isMapped>,347,SourceNode, path: ) => Node(<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>,return $stack28,349,SinkNode, path: ))

List(Node(<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>,if $stack6 == 0 goto $stack7 = new org.rdfhdt.hdt.triples.TripleID,336,SourceNode, path: ) => Node(<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>,$stack7 = new org.rdfhdt.hdt.triples.TripleID,341,SimpleNode, path: (<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>, specialinvoke $stack7.<org.rdfhdt.hdt.triples.TripleID: void <init>(int,int,int)>($stack10, $stack13, $stack16), 344)) => Node(<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>,triple = $stack7,344,SimpleNode, path: (<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>, triple = $stack7, 344)) => Node(<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>,$stack17 = virtualinvoke triple.<org.rdfhdt.hdt.triples.TripleID: boolean isNoMatch()>(),347,SourceNode, path: (<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>, $stack17 = virtualinvoke triple.<org.rdfhdt.hdt.triples.TripleID: boolean isNoMatch()>(), 347)) => Node(<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>,if $stack17 == 0 goto $stack18 = this.<org.rdfhdt.hdt.hdt.impl.HDTImpl: boolean isMapped>,347,SourceNode, path: ) => Node(<org.rdfhdt.hdt.hdt.impl.HDTImpl: org.rdfhdt.hdt.triples.IteratorTripleString search(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>,return $stack28,349,SinkNode, path: ))

